; Generated by PSoC Designer 5.0.985.0
;
;
;  thesis_revoluteINT.asm
;
;  Data: 29 October, 2001
;  Copyright Cypress MicroSystems 2001
;
;  This file is generated by the Device Editor on Application Generation.
;  It contains dispatch code that ensures that interrupt vectors are 
;  serviced by the appropriate ISR depending on the currently active
;  configuration.
;  
;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
;  Edits to this file will not be preserved.
;
include "PSoCDynamic.inc"
include "m8c.inc"
export	Dispatch_INTERRUPT_10
export	Dispatch_INTERRUPT_11
export	Dispatch_INTERRUPT_9


Dispatch_INTERRUPT_10:
	push	a
	mov		a,0
	tst		[ACTIVE_CONFIG_STATUS+hello_ADDR_OFF], hello_BIT
	jnz		Dispatch_INTERRUPT_10_END
	mov		a,4
	tst		[ACTIVE_CONFIG_STATUS+initial_ADDR_OFF], initial_BIT
	jnz		Dispatch_INTERRUPT_10_END
	mov		a,8
	tst		[ACTIVE_CONFIG_STATUS+my_response_ADDR_OFF], my_response_BIT
	jnz		Dispatch_INTERRUPT_10_END
	mov		a,12
	tst		[ACTIVE_CONFIG_STATUS+response1_ADDR_OFF], response1_BIT
	jnz		Dispatch_INTERRUPT_10_END
	mov		a,16
	tst		[ACTIVE_CONFIG_STATUS+response2_ADDR_OFF], response2_BIT
	jnz		Dispatch_INTERRUPT_10_END
	mov		a,20
	tst		[ACTIVE_CONFIG_STATUS+response3_ADDR_OFF], response3_BIT
	jnz		Dispatch_INTERRUPT_10_END
	mov		a,24
	tst		[ACTIVE_CONFIG_STATUS+response4_ADDR_OFF], response4_BIT
	jnz		Dispatch_INTERRUPT_10_END
	mov		a,28
	tst		[ACTIVE_CONFIG_STATUS+servo_transmit_ADDR_OFF], servo_transmit_BIT
	jnz		Dispatch_INTERRUPT_10_END
	mov		a,32
	tst		[ACTIVE_CONFIG_STATUS+waiting_ADDR_OFF], waiting_BIT
	jnz		Dispatch_INTERRUPT_10_END
	pop		a
	reti
; Stop Code Compressor from breaking table alignment
; The next instruction does not get executed.
	Suspend_CodeCompressor
Dispatch_INTERRUPT_10_END:
	jacc	Dispatch_INTERRUPT_10_TBL
Dispatch_INTERRUPT_10_TBL:
	pop		a
	ljmp	_HELLO_1_ISR
	pop		a
	ljmp	_INIT_RX_ISR
	pop		a
	ljmp	_TX_014_ISR
	pop		a
	ljmp	_CHILD_1_ISR
	pop		a
	ljmp	_CHILD_2_ISR
	pop		a
	ljmp	_CHILD_3_ISR
	pop		a
	ljmp	_CHILD_4_ISR
	pop		a
	ljmp	_SERVO_TX_ISR
	pop		a
	ljmp	_WAIT_RECV_ISR
; Resume Code Compressor.
; The next instruction does not get executed.
	Resume_CodeCompressor

Dispatch_INTERRUPT_11:
	push	a
	mov		a,0
	tst		[ACTIVE_CONFIG_STATUS+hello_ADDR_OFF], hello_BIT
	jnz		Dispatch_INTERRUPT_11_END
	mov		a,4
	tst		[ACTIVE_CONFIG_STATUS+my_response_ADDR_OFF], my_response_BIT
	jnz		Dispatch_INTERRUPT_11_END
	mov		a,8
	tst		[ACTIVE_CONFIG_STATUS+waiting_ADDR_OFF], waiting_BIT
	jnz		Dispatch_INTERRUPT_11_END
	pop		a
	reti
; Stop Code Compressor from breaking table alignment
; The next instruction does not get executed.
	Suspend_CodeCompressor
Dispatch_INTERRUPT_11_END:
	jacc	Dispatch_INTERRUPT_11_TBL
Dispatch_INTERRUPT_11_TBL:
	pop		a
	ljmp	_HELLO_2_ISR
	pop		a
	ljmp	_TX_23_ISR
	pop		a
	ljmp	_RX8_2_ISR
; Resume Code Compressor.
; The next instruction does not get executed.
	Resume_CodeCompressor

Dispatch_INTERRUPT_9:
	push	a
	mov		a,0
	tst		[ACTIVE_CONFIG_STATUS+hello_ADDR_OFF], hello_BIT
	jnz		Dispatch_INTERRUPT_9_END
	mov		a,4
	tst		[ACTIVE_CONFIG_STATUS+initial_ADDR_OFF], initial_BIT
	jnz		Dispatch_INTERRUPT_9_END
	mov		a,8
	tst		[ACTIVE_CONFIG_STATUS+my_response_ADDR_OFF], my_response_BIT
	jnz		Dispatch_INTERRUPT_9_END
	mov		a,12
	tst		[ACTIVE_CONFIG_STATUS+response1_ADDR_OFF], response1_BIT
	jnz		Dispatch_INTERRUPT_9_END
	mov		a,16
	tst		[ACTIVE_CONFIG_STATUS+response2_ADDR_OFF], response2_BIT
	jnz		Dispatch_INTERRUPT_9_END
	mov		a,20
	tst		[ACTIVE_CONFIG_STATUS+response3_ADDR_OFF], response3_BIT
	jnz		Dispatch_INTERRUPT_9_END
	mov		a,24
	tst		[ACTIVE_CONFIG_STATUS+response4_ADDR_OFF], response4_BIT
	jnz		Dispatch_INTERRUPT_9_END
	pop		a
	reti
; Stop Code Compressor from breaking table alignment
; The next instruction does not get executed.
	Suspend_CodeCompressor
Dispatch_INTERRUPT_9_END:
	jacc	Dispatch_INTERRUPT_9_TBL
Dispatch_INTERRUPT_9_TBL:
	pop		a
	ljmp	_HELLO_TIMEOUT_ISR
	pop		a
	ljmp	_INIT_TIMEOUT_ISR
	pop		a
	ljmp	_TX_01234_TIMEOUT_ISR
	pop		a
	ljmp	_CHILD_1_TIMEOUT_ISR
	pop		a
	ljmp	_CHILD_2_TIMEOUT_ISR
	pop		a
	ljmp	_CHILD_3_TIMEOUT_ISR
	pop		a
	ljmp	_CHILD_4_TIMEOUT_ISR
; Resume Code Compressor.
; The next instruction does not get executed.
	Resume_CodeCompressor

