;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: INIT_RXINT.asm
;;   Version: 3.3, Updated on 2009/7/10 at 10:46:15
;;  Generated by PSoC Designer 5.0.985.0
;;
;;  DESCRIPTION: RX8 Interrupt Service Routine.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "INIT_RX.inc"


;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export  _INIT_RX_ISR


IF (INIT_RX_RXBUF_ENABLE)
export  INIT_RX_aRxBuffer
export _INIT_RX_aRxBuffer
export  INIT_RX_bRxCnt
export _INIT_RX_bRxCnt
export  INIT_RX_fStatus
export _INIT_RX_fStatus
ENDIF


;-----------------------------------------------
; Variable Allocation
;-----------------------------------------------

IF (INIT_RX_RXBUF_ENABLE)
AREA InterruptRAM(RAM,REL,CON)
 INIT_RX_fStatus:
_INIT_RX_fStatus:      BLK  1
 INIT_RX_bRxCnt:
_INIT_RX_bRxCnt:       BLK  1
AREA INIT_RX_RAM(RAM,REL,CON)
 INIT_RX_aRxBuffer:    
_INIT_RX_aRxBuffer:    BLK INIT_RX_RX_BUFFER_SIZE
ENDIF


AREA InterruptRAM(RAM,REL,CON)

;@PSoC_UserCode_INIT@ (Do not change this line.)
;---------------------------------------------------
; Insert your custom declarations below this banner
;---------------------------------------------------

;------------------------
; Includes
;------------------------

	
;------------------------
;  Constant Definitions
;------------------------


;------------------------
; Variable Allocation
;------------------------


;---------------------------------------------------
; Insert your custom declarations above this banner
;---------------------------------------------------
;@PSoC_UserCode_END@ (Do not change this line.)


AREA UserModules (ROM, REL)

;-----------------------------------------------------------------------------
;  FUNCTION NAME: _INIT_RX_ISR
;
;  DESCRIPTION: Unless modified, this implements only a null handler stub.
;
;-----------------------------------------------------------------------------
;

_INIT_RX_ISR:

   ;@PSoC_UserCode_BODY@ (Do not change this line.)
   ;---------------------------------------------------
   ; Insert your custom code below this banner
   ;---------------------------------------------------
   ;   NOTE: interrupt service routines must preserve
   ;   the values of the A and X CPU registers.

   ;---------------------------------------------------
   ; Insert your custom code above this banner
   ;---------------------------------------------------
   ;@PSoC_UserCode_END@ (Do not change this line.)

 IF (INIT_RX_RXBUF_ENABLE)
   push A
   push X

   IF SYSTEM_LARGE_MEMORY_MODEL
      REG_PRESERVE IDX_PP                                  ; Save the IDX_PP register	
   ENDIF

   mov  X,[INIT_RX_bRxCnt]                                 ; Load X with byte counter
   mov  A,REG[INIT_RX_CONTROL_REG]                         ; Read the control register
   push A                                                  ; Store copy for later test
                                                           ; IF real RX interrupt
   and  A,INIT_RX_RX_REG_FULL                              ; Did really really get an IRQ
   jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   pop  A                                                  ; Restore stack
   jmp  .RESTORE_IDX_PP

.UARTRX_ReadRx:

   pop  A                                                  ; Restore status flags
                                                           ; IF there is no error, get data
                                                           ; Check for parity or framing error
   and  A,INIT_RX_RX_ERROR
   jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data

   or   [INIT_RX_fStatus],A                                ; Set error flags (parity,framing,overrun) bits

   tst  REG[INIT_RX_RX_BUFFER_REG], 0x00                   ; Read the data buffer to clear it.

   and  A,INIT_RX_RX_FRAMING_ERROR                         ; Check for framing error special case
   jz   .RESTORE_IDX_PP                                    ; Not framing error, all done

                                                           ; Disable and re-enable RX to reset after
                                                           ; framing error.
   and   REG[INIT_RX_CONTROL_REG], ~INIT_RX_RX_ENABLE      ; Disable RX
   or    REG[INIT_RX_CONTROL_REG],  INIT_RX_RX_ENABLE      ; Enable RX
   jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.


.UARTRX_NO_ERROR:
   mov  A,REG[INIT_RX_RX_BUFFER_REG ]                      ; Read the data buffer

                                                           ; IF buffer not full
   tst  [INIT_RX_fStatus],INIT_RX_RX_BUF_CMDTERM           ; Check for buffer full
   jnz  .RESTORE_IDX_PP                                    ; All done

   cmp  A,INIT_RX_CMD_TERM                                 ; Check for End of command
   jnz  .UARTRX_CHK_CTLCHAR
   or   [INIT_RX_fStatus],INIT_RX_RX_BUF_CMDTERM           ; Set command ready bit

   RAM_SETPAGE_IDX >INIT_RX_aRxBuffer
   RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   mov  [X + INIT_RX_aRxBuffer],00h                        ; Zero out last data
   RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   jmp  .RESTORE_IDX_PP

.UARTRX_CHK_CTLCHAR:                                       ; Ignore charaters below this value
                                                           ; If ignore char is set to 0x00, do not
                                                           ; ignore any characters.
IF(INIT_RX_RX_IGNORE_BELOW)
   cmp  A,INIT_RX_RX_IGNORE_BELOW
   jc   .RESTORE_IDX_PP
ENDIF

.UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   cmp  [INIT_RX_bRxCnt],(INIT_RX_RX_BUFFER_SIZE - 1)
   jc   .UARTRX_ISR_GETDATA
   or   [INIT_RX_fStatus],INIT_RX_RX_BUF_OVERRUN           ; Set error flags (parity,framing,overrun) bits

   RAM_SETPAGE_IDX >INIT_RX_aRxBuffer             ;   using idexed address mode
   RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   mov  [X + INIT_RX_aRxBuffer],00h                        ; Zero out last data
   RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   jmp  .RESTORE_IDX_PP

                                                           ; IF input data == "CR", then end of command
.UARTRX_ISR_GETDATA:
   inc  X                                                  ; Inc the pointer
   mov  [INIT_RX_bRxCnt],X                                 ; Restore the pointer
   dec  X                                                  ; Mov X to its original value

   RAM_SETPAGE_IDX >INIT_RX_aRxBuffer             ;   using idexed address mode
   RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   mov  [X+INIT_RX_aRxBuffer],A                            ; store data in array
   RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b


.RESTORE_IDX_PP:
   IF SYSTEM_LARGE_MEMORY_MODEL
      REG_RESTORE IDX_PP
   ENDIF

.END_UARTRX_ISR:
   pop  X
   pop  A

ENDIF

INIT_RX_RX_ISR_END:
   reti


; end of file INIT_RXINT.asm
