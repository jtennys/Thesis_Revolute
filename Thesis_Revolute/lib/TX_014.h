//*****************************************************************************
//*****************************************************************************
//  FILENAME: TX_014.h
//   Version: 3.3, Updated on 2009/7/10 at 10:46:51
//  Generated by PSoC Designer 5.0.985.0
//
//  DESCRIPTION: TX8 User Module C Language interface file for the
//               22/24/25/26/27xxx PSoC family of devices.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

#include <m8c.h>

/* Create pragmas to support proper argument and return value passing */
#pragma fastcall16  TX_014_SetTxIntMode
#pragma fastcall16  TX_014_EnableInt
#pragma fastcall16  TX_014_DisableInt
#pragma fastcall16  TX_014_Start
#pragma fastcall16  TX_014_Stop
#pragma fastcall16  TX_014_SendData
#pragma fastcall16  TX_014_bReadTxStatus

// High level TX functions
#pragma fastcall16  TX_014_PutSHexByte
#pragma fastcall16  TX_014_PutSHexInt
#pragma fastcall16  TX_014_CPutString
#pragma fastcall16  TX_014_PutString
#pragma fastcall16  TX_014_PutChar
#pragma fastcall16  TX_014_Write
#pragma fastcall16  TX_014_CWrite
#pragma fastcall16  TX_014_PutCRLF

//-------------------------------------------------
// Prototypes of the TX_014 API.
//-------------------------------------------------
extern void  TX_014_SetTxIntMode(BYTE bTxIntMode);
extern void  TX_014_EnableInt(void);
extern void  TX_014_DisableInt(void);
extern void  TX_014_Start(BYTE bParity);
extern void  TX_014_Stop(void);
extern void  TX_014_SendData(BYTE bTxData);
extern BYTE  TX_014_bReadTxStatus(void);

// High level TX functions
extern void   TX_014_CPutString(const char * szRomString);
extern void   TX_014_PutString(char * szRamString);
extern void   TX_014_PutChar(CHAR cData);
extern void   TX_014_Write(char * szRamString, BYTE bCount);
extern void   TX_014_CWrite(const char * szRomString, INT iCount);
extern void   TX_014_PutSHexByte(BYTE bValue);
extern void   TX_014_PutSHexInt(INT iValue);
extern void   TX_014_PutCRLF(void);

// Old style function name, Do Not Use.
// Will be removfr in a future release
#pragma fastcall16 bTX_014_ReadTxStatus
extern BYTE bTX_014_ReadTxStatus(void);

//------------------------------------
//  Transmitter Parity masks
//------------------------------------
#define  TX_014_PARITY_NONE         0x00
#define  TX_014_PARITY_EVEN         0x02
#define  TX_014_PARITY_ODD          0x06

//------------------------------------
//  Transmitter Status Register masks
//------------------------------------
#define  TX_014_TX_COMPLETE         0x20
#define  TX_014_TX_BUFFER_EMPTY     0x10

#define TX_014_INT_MODE_TX_REG_EMPTY 0x00
#define TX_014_INT_MODE_TX_COMPLETE  0x01

//------------------------------------
// Transmitter Interrupt masks
//------------------------------------
#define TX_014_INT_REG_ADDR                    ( 0x0e1 )
#define TX_014_bINT_MASK                       ( 0x04 )

// Old style defines, do not use.  These
// will be removed in a future release.
#define  TX8_PARITY_NONE         0x00
#define  TX8_PARITY_EVEN         0x02
#define  TX8_PARITY_ODD          0x06
#define  TX8_TX_COMPLETE         0x20
#define  TX8_TX_BUFFER_EMPTY     0x10



//-------------------------------------------------
// Register Addresses for TX_014
//-------------------------------------------------
#pragma ioport  TX_014_CONTROL_REG: 0x02b                  // Control register
BYTE            TX_014_CONTROL_REG;
#pragma ioport  TX_014_TX_SHIFT_REG:    0x028              // TX Shift Register register
BYTE            TX_014_TX_SHIFT_REG;
#pragma ioport  TX_014_TX_BUFFER_REG:   0x029              // TX Buffer Register
BYTE            TX_014_TX_BUFFER_REG;
#pragma ioport  TX_014_FUNC_REG:    0x128                  // Function register
BYTE            TX_014_FUNC_REG;
#pragma ioport  TX_014_INPUT_REG:   0x129                  // Input register
BYTE            TX_014_INPUT_REG;
#pragma ioport  TX_014_OUTPUT_REG:  0x12a                  // Output register
BYTE            TX_014_OUTPUT_REG;

// end of file TX_014.h
