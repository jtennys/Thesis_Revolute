                ; Generated by PSoC Designer 5.0.985.0
                ;
 0001           waiting_BIT:	equ	 1h
 0000           waiting_ORD:	equ	 0
 0000           waiting_ADDR_OFF:	equ	 0
 0002           hello_BIT:	equ	 2h
 0001           hello_ORD:	equ	 1
 0000           hello_ADDR_OFF:	equ	 0
 0004           initial_BIT:	equ	 4h
 0002           initial_ORD:	equ	 2
 0000           initial_ADDR_OFF:	equ	 0
 0008           my_response_BIT:	equ	 8h
 0003           my_response_ORD:	equ	 3
 0000           my_response_ADDR_OFF:	equ	 0
 0010           response1_BIT:	equ	10h
 0004           response1_ORD:	equ	 4
 0000           response1_ADDR_OFF:	equ	 0
 0020           response2_BIT:	equ	20h
 0005           response2_ORD:	equ	 5
 0000           response2_ADDR_OFF:	equ	 0
 0040           response3_BIT:	equ	40h
 0006           response3_ORD:	equ	 6
 0000           response3_ADDR_OFF:	equ	 0
 0080           response4_BIT:	equ	80h
 0007           response4_ORD:	equ	 7
 0000           response4_ADDR_OFF:	equ	 0
 0001           servo_transmit_BIT:	equ	 1h
 0008           servo_transmit_ORD:	equ	 8
 0001           servo_transmit_ADDR_OFF:	equ	 1
 0000           ;==========================================================================
 0000           ;  PSoCConfig.asm
 0000           ;  @PSOC_VERSION
 0000           ;
 0000           ;  Version: 0.85
 0000           ;  Revised: June 22, 2004
 0000           ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
 0000           ;
 0000           ;  This file is generated by the Device Editor on Application Generation.
 0000           ;  It contains code which loads the configuration data table generated in
 0000           ;  the file PSoCConfigTBL.asm
 0000           ;
 0000           ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
 0000           ;  Edits to this file will not be preserved.
 0000           ;==========================================================================
 0000           ;
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type C
 0020           DBC00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBC00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBC00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBC00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type C
 0024           DBC01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBC01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBC01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBC01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type C
 0028           DCC02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCC02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type C
 002C           DCC03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCC03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type C
 0030           DBC10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBC10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBC10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBC10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type C
 0034           DBC11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBC11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBC11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBC11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type C
 0038           DCC12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCC12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type C
 003C           DCC13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCC13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 20, Basic Type C
 0040           DBC20DR0:     equ 40h          ; data register 0                          (#)
 0041           DBC20DR1:     equ 41h          ; data register 1                          (W)
 0042           DBC20DR2:     equ 42h          ; data register 2                          (RW)
 0043           DBC20CR0:     equ 43h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 21, Basic Type C
 0044           DBC21DR0:     equ 44h          ; data register 0                          (#)
 0045           DBC21DR1:     equ 45h          ; data register 1                          (W)
 0046           DBC21DR2:     equ 46h          ; data register 2                          (RW)
 0047           DBC21CR0:     equ 47h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 22, Communications Type C
 0048           DCC22DR0:     equ 48h          ; data register 0                          (#)
 0049           DCC22DR1:     equ 49h          ; data register 1                          (W)
 004A           DCC22DR2:     equ 4Ah          ; data register 2                          (RW)
 004B           DCC22CR0:     equ 4Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 23, Communications Type C
 004C           DCC23DR0:     equ 4Ch          ; data register 0                          (#)
 004D           DCC23DR1:     equ 4Dh          ; data register 1                          (W)
 004E           DCC23DR2:     equ 4Eh          ; data register 2                          (RW)
 004F           DCC23CR0:     equ 4Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h   ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUX_CFG:     equ 61h          ; Analog Mux Configuration Register        (RW)
 0080           AMUX_CFG_BCOL1MUX:    equ 80h    ; MASK: column 1 input select
 0040           AMUX_CFG_ACOL0MUX:    equ 40h    ; MASK: column 0 input select
 0030           AMUX_CFG_INTCAP:      equ 30h    ; MASK: pin select for static mode
 000E           AMUX_CFG_MUXCLK:      equ 0Eh    ; MASK: MUXCLK1 source select
 0001           AMUX_CFG_EN:          equ 01h    ; MASK: MUXCLK enable
 0000           
 0062           CLK_CR3:      equ 62h          ; Analog Clock Source Control Register 3   (RW)
 000F           CLK_CR3_SYSDIR:       equ 0Fh    ; MASK: Column clock source select
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0002           CMP_CR1_CLK1X1:       equ 02h    ; MASK: Digital comparator bus 1 synch clock
 0001           CMP_CR1_CLK1X0:       equ 01h    ; MASK: Digital comparator bus 0 synch clock
 0000           
 006A           SADC_DH:      equ 6Ah          ; ADC Data High-Byte                       (RW)
 006B           SADC_DL:      equ 6Bh          ; ADC Data Low-Byte                        (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP0_DR:      equ 6Ch          ; deprecated do not use
 006D           TMP1_DR:      equ 6Dh          ; deprecated do not use
 006E           TMP2_DR:      equ 6Eh          ; deprecated do not use
 006F           TMP3_DR:      equ 6Fh          ; deprecated do not use
 0000           
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type C Row 0 Col 0
 0070           ACC00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACC00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACC00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACC00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type C Row 0 Col 1
 0074           ACC01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACC01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACC01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACC01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type C Row 0 Col 2
 0078           ACC02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACC02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACC02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACC02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type C Row 0 Col 3
 007C           ACC03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACC03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACC03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACC03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ; Decimator Data Registers
 0000           ;------------------------------------------------
 00A0           DEC0_DH:      equ A0h          ; Data Register 0( high byte)
 00A1           DEC0_DL:      equ A1h          ; Data Register 0( low byte)
 00A2           DEC1_DH:      equ A2h          ; Data Register 1( high byte)
 00A3           DEC1_DL:      equ A3h          ; Data Register 1( low byte)
 00A4           DEC2_DH:      equ A4h          ; Data Register 2( high byte)
 00A5           DEC2_DL:      equ A5h          ; Data Register 2( low byte)
 00A6           DEC3_DH:      equ A6h          ; Data Register 3( high byte)
 00A7           DEC3_DL:      equ A7h          ; Data Register 3( low byte)
 0000           
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           							   
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 00B7           RDI0DSM:      equ 0B7h          ; Row Digital Interconnect Row 0 Digital 
 0000                                           ; Delta-Sigma Modulator Select Register    (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 00BF           RDI1DSM:      equ 0BFh          ; Row Digital Interconnect Row 1 Digital 
 0000                                           ; Delta-Sigma Modulator Select Register    (RW)
 0000           
 00C0           RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
 00C1           RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
 00C2           RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
 00C3           RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
 00C4           RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
 00C5           RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
 00C6           RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
 00C7           RDI2DSM:      equ 0C7h          ; Row Digital Interconnect Row 2 Digital 
 0000                                           ; Delta-Sigma Modulator Select Register    (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C0_CFG:      equ 0D6h          ; I2C 0 Configuration Register             (RW)
 0040           I2C0_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C0_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C0_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C0_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C0_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C0_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C0_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C0_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C0_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C0_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 016B           I2C1_CFG:      equ 16Bh          ; I2C 1 Configuration Register             (RW)
 0040           I2C1_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C1_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C1_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C1_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C1_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C1_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C1_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C1_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C1_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C1_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C0_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C0_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C0_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C0_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C0_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C0_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C0_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C0_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C0_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00E4           I2C1_SCR:      equ 0E4h          ; I2C 1 Status and Control Register        (#)
 0080           I2C1_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C1_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C1_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C1_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C1_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C1_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C1_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C1_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C0_DR:       equ 0D8h         ; I2C 0 Data Register                      (RW)
 0067           I2C1_DR:       equ 067h         ; I2C 1 Data Register                      (RW)
 0000           
 00D9           I2C0_MSCR:     equ 0D9h         ; I2C 0 Master Status and Control Register  (#)
 0008           I2C0_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)         (R)
 0004           I2C0_MSCR_MODE:         equ 04h   ; MASK: Start has been generated          (R)
 0002           I2C0_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C0_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; Misc. Interrupt Mask Register            (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0020           INT_MSK3_ACOLUMN_5:        equ 20h ; MASK: enable/disable Analog col 5 interrupt
 0010           INT_MSK3_ACOLUMN_4:        equ 10h ; MASK: enable/disable Analog col 4 interrupt
 0008           INT_MSK3_RTC:              equ 08h ; MASK: enable/disable RTC interrupt
 0004           INT_MSK3_SARADC:           equ 04h ; MASK: enable/disable SARADC interrupt
 0002           INT_MSK3_I2C1:             equ 02h ; MASK: enable/disable I2C 1 interrupt
 0001           INT_MSK3_I2C0:             equ 01h ; MASK: enable/disable I2C 0 interrupt
 0000           
 00DF           INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register (2 of 2) (RW)
 0080           INT_MSK2_DCC33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
 0040           INT_MSK2_DCC32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
 0020           INT_MSK2_DBC31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
 0010           INT_MSK2_DBC30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
 0008           INT_MSK2_DCC23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
 0004           INT_MSK2_DCC22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
 0002           INT_MSK2_DBC21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
 0001           INT_MSK2_DBC20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 0000           //   Compatibility Set: Maps onto MAC0
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EA           MUL_RESULT:   equ 0EAh          ; Multiplier Result Data - WORD            (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00ED           ACC_DR0:      equ MAC_Y         ; read =  MAC Accumulator, byte 0          (RW)
 00EC           ACC_DR1:      equ MAC_X         ; read =  MAC Accumulator, byte 1          (RW)
 00EE           ACC_DR3:      equ MAC_CL0       ; read =  MAC Accumulator, byte 3          (RW)
 00EF           ACC_DR2:      equ MAC_CL1       ; read =  MAC Accumulator, byte 2          (RW)
 00EC           ACC_LOW_WORD: equ 0ECh          ; MAC Accumulator (Read low word)          (R)
 00EE           ACC_HI_WORD:  equ 0EEh          ; MAC Accumulator (Read high word)         (R)
 0000           
 0000           // Multiply/Accumulate Unit 0
 00E8           MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
 00E9           MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
 00EA           MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
 00EB           MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
 00EA           MUL0_RESULT:  equ 0EAh          ; Multiplier 0 Result Data - WORD
 00EC           MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
 00ED           MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
 00EE           MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
 00EF           MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
 00ED           ACC0_DR0:     equ MAC0_Y        ; read =  MAC 0 Accumulator, byte 0        (RW)
 00EC           ACC0_DR1:     equ MAC0_X        ; read =  MAC 0 Accumulator, byte 1        (RW)
 00EE           ACC0_DR3:     equ MAC0_CL0      ; read =  MAC 0 Accumulator, byte 3        (RW)
 00EF           ACC0_DR2:     equ MAC0_CL1      ; read =  MAC 0 Accumulator, byte 2        (RW)
 00EC           ACC0_LOW_WORD: equ 0ECh         ; MAC Accumulator (Read low word)          (R)
 00EE           ACC0_HI_WORD:  equ 0EEh         ; MAC Accumulator (Read high word)         (R)
 0000           
 0000           // Multiply/Accumulate Unit 1
 00A8           MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
 00A9           MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
 00AA           MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
 00AB           MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
 00AA           MUL1_RESULT:  equ 0AAh          ; Multiplier 1 Result Data - WORD          (R)
 00AC           MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
 00AD           MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
 00AE           MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
 00AF           MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
 00AD           ACC1_DR0:     equ MAC1_Y        ; read =  MAC 1 Accumulator, byte 0        (RW)
 00AC           ACC1_DR1:     equ MAC1_X        ; read =  MAC 1 Accumulator, byte 1        (RW)
 00AE           ACC1_DR3:     equ MAC1_CL0      ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AF           ACC1_DR2:     equ MAC1_CL1      ; read =  MAC 1 Accumulator, byte 2        (RW)
 00AC           ACC1_LOW_WORD: equ 0ACh         ; MAC Accumulator (Read low word)          (R)
 00AE           ACC1_HI_WORD:  equ 0AEh         ; MAC Accumulator (Read high word)         (R)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           								   
 00FC           IDAC1_D:      equ 0FCh          ; Left Analog Mux DAC Data Register        (RW)
 00FD           IDAC0_D:      equ 0FDh          ; Right Analog Mux DAC Data Register       (RW)
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
 0010           CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type C
 0020           DBC00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBC00IN:      equ 21h          ; Input Register                           (RW)
 0022           DBC00OU:      equ 22h          ; Output Register                          (RW)
 0023           DBC00CR1:     equ 23h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type C
 0024           DBC01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBC01IN:      equ 25h          ; Input Register                           (RW)
 0026           DBC01OU:      equ 26h          ; Output Register                          (RW)
 0027           DBC01CR1:     equ 27h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type C
 0028           DCC02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCC02IN:      equ 29h          ; Input Register                           (RW)
 002A           DCC02OU:      equ 2Ah          ; Output Register                          (RW)
 002B           DCC02CR1:     equ 2Bh          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type C
 002C           DCC03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCC03IN:      equ 2Dh          ; Input Register                           (RW)
 002E           DCC03OU:      equ 2Eh          ; Output Register                          (RW)
 002F           DCC03CR1:     equ 2Fh          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type C
 0030           DBC10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBC10IN:      equ 31h          ; Input Register                           (RW)
 0032           DBC10OU:      equ 32h          ; Output Register                          (RW)
 0033           DBC10CR1:     equ 33h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type C
 0034           DBC11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBC11IN:      equ 35h          ; Input Register                           (RW)
 0036           DBC11OU:      equ 36h          ; Output Register                          (RW)
 0037           DBC11CR1:     equ 37h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type C
 0038           DCC12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCC12IN:      equ 39h          ; Input Register                           (RW)
 003A           DCC12OU:      equ 3Ah          ; Output Register                          (RW)
 003B           DCC12CR1:     equ 3Bh          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type C
 003C           DCC13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCC13IN:      equ 3Dh          ; Input Register                           (RW)
 003E           DCC13OU:      equ 3Eh          ; Output Register                          (RW)
 003F           DCC13CR1:     equ 3Fh          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 20, Basic Type C
 0040           DBC20FN:      equ 40h          ; Function Register                        (RW)
 0041           DBC20IN:      equ 41h          ; Input Register                           (RW)
 0042           DBC20OU:      equ 42h          ; Output Register                          (RW)
 0043           DBC20CR1:     equ 43h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 21, Basic Type C
 0044           DBC21FN:      equ 44h          ; Function Register                        (RW)
 0045           DBC21IN:      equ 45h          ; Input Register                           (RW)
 0046           DBC21OU:      equ 46h          ; Output Register                          (RW)
 0047           DBC21CR1:     equ 47h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 22, Communications Type C
 0048           DCC22FN:      equ 48h          ; Function Register                        (RW)
 0049           DCC22IN:      equ 49h          ; Input Register                           (RW)
 004A           DCC22OU:      equ 4Ah          ; Output Register                          (RW)
 004B           DCC22CR1:     equ 4Bh          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 23, Communications Type C
 004C           DCC23FN:      equ 4Ch          ; Function Register                        (RW)
 004D           DCC23IN:      equ 4Dh          ; Input Register                           (RW)
 004E           DCC23OU:      equ 4Eh          ; Output Register                          (RW)
 004F           DCC23CR1:     equ 4Fh          ; Control Register                         (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0              (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h   ; MASK: Specify Clock Cor Analog Cloumn 3
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify Clock Cor Analog Cloumn 2
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify Clock Cor Analog Cloumn 1
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify Clock Cor Analog Cloumn 0
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1              (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC Block For Analog Source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC Block For Analog Source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0            (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass The Analog Buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High Power Mode On All Analog Buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation Source For Analog Column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation Source For Analog Column 1
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus to Global Outputs Enable Register   (RW)
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Select Column 0 Signal To Output
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Drives The Selected Column 0 Signal To GOO0
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Drives The Selected Column 0 Signal To GOO4
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Select Column 1 Signal To Output
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Drives The Selected Column 1 Signal To GOO1    
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Drives The Selected Column 1 Signal To GOO5
 0000           
 0065           CMP_GO_EN1:   equ 65h          ; Comparator Bus to Global Outputs Enable Register 1 (RW)
 0003           CMP_GO_EN_SEL2:       equ 03h    ; MASK: Select Column 2 Signal To Output
 0004           CMP_GO_EN_GOO2:       equ 04h    ; MASK: Drives The Selected Column 2 Signal To GOO2
 0008           CMP_GO_EN_GOO6:       equ 08h    ; MASK: Drives The Selected Column 2 Signal To GOO6
 0030           CMP_GO_EN_SEL3:       equ 30h    ; MASK: Select Column 3 Signal To Output
 0040           CMP_GO_EN_GOO3:       equ 40h    ; MASK: Drives The Selected Column 3 Signal To GOO3
 0080           CMP_GO_EN_GOO7:       equ 80h    ; MASK: Drives The Selected Column 3 Signal To GOO7
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1                (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation Ctrl For Analog Column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation Ctrl For Analog Column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0              (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h   ; MASK: Look Up Table 1 Selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look Up Table 0 Selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1              (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h   ; MASK: Look Up Table 3 Selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look Up Table 2 Selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2             (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 006A           AMUX_CFG1:    equ 6Ah          ; Analog Mux Config Register 1                       (RW)
 0001           AMUX_CFG1_EN0:        equ 01h    ; MASK: Enable/Disable MUXCLK 0 For Analog Mux Bus 0
 000E           AMUX_CFG1_MUXCLK0:    equ 0Eh    ; MASK: Clock Select For Analog Mux Bus 0
 0010           AMUX_CFG1_ACOl0MUX:   equ 10h    ; MASK: Analog Column 1 Input Select
 0020           AMUX_CFG1_ACOL3MUX:   equ 20h    ; MASK: Analog Column 3 Input Select
 0040           AMUX_CFG1_ABUSMUX2:   equ 40h    ; MASK: Analog Column 2 Analog Mux Bus Select
 0080           AMUX_CFG1_ABUSMUX3:   equ 80h    ; MASK: Analog column 3 Analog Mux Bus Select
 0000           
 0071           SADC_TSCR0:   equ 71h          ; SAR ADC Trigger Source Control Register 0          (RW)
 0072           SADC_TSCR1:   equ 72h          ; SAR ADC Trigger Source Control Register 1          (RW) 
 0081           SADC_TSCMPL:  equ 81h          ; SAR ADC Trigger Source Comparator Low Register     (RW)
 0082           SADC_TSCMPH:  equ 82h          ; SAR ADC Trigger Source Comparator High Register    (RW)
 0000           
 0073           ACE_AMD_CR0:   equ 73h          ; Analog Modulation Control Register 0               (RW)
 000F           ACE_AMD_CR0_AMOD0:    equ 0Fh    ; MASK: Column 0 analog modulation control signal select
 0000           
 0075           ACE_AMX_IN:    equ 75h          ; Analog Input Select Register                       (RW)
 00C0           ACE_AMX_IN_ACI3:      equ C0h    ; MASK: Selects Analog Column Mux 3
 0030           ACE_AMX_IN_ACI2:      equ 30h    ; MASK: Selects Analog Column Mux 2
 000C           ACE_AMX_IN_ACI1:      equ 0Ch    ; MASK: Selects Analog Column Mux 1
 0003           ACE_AMX_IN_ACI0:      equ 03h    ; MASK: Selects Analog Column Mux 0
 0000           
 0076           ACE_CMP_CR0:   equ 76h          ; Analog Comparator Bus 0 Register                   (RW)
 0077           ACE_CMP_CR1:   equ 77h          ; Analog Comparator Bus 1 Register                   (RW)
 0000           
 0079           ACE_CMP_GI_EN: equ 79h         ; Analog Type E Columns Compare Bus to Global Outputs Control Register (RW)
 0000           
 007A           ACE_ALT_CR0:   equ 7Ah          ; Analog LUT Control Register 0                      (RW)
 00F0           ACE_ALT_CR0_LUT1:     equ F0h    ; MASK: Select 1 Of 16 Logic Functions for Output Of Comparator Bus 1
 000F           ACE_ALT_CR0_LUT0:     equ 0Fh    ; MASK: Select 1 Of 16 Logic Functions for Output Of Comparator Bus 0
 0000           
 007B           ACE_ABF_CR0:   equ 7Bh         ; Analog Output Buffer Control Register 0            (RW)
 0080           ACE_ABF_CR0_ACE1MUX:  equ 80h    ; MASK: Set ACE Column 1 input to ACE column 1 or 0 input mux output
 0040           ACE_ABF_CR0_ACE0MUX:  equ 40h    ; MASK: Set ACE Column 0 input to ACE column 1 or 0 input mux output
 0000           
 007D           ACE00CR1:      equ 7Dh         ; Analog Continuous Time Type E Block Control Register 1               (RW)
 007E           ACE00CR2:      equ 7Eh         ; Analog Continuous Time Type E Block Control Register 2               (RW)
 0002           ACE00CR2_FULL_RANGE:  equ 02h    ; MASK: Input Range Select
 0001           ACE00CR2_PWR:         equ 01h    ; MASK: Analog Blocks Power Control
 0000           
 007F           ASE10CR0:      equ 7Fh         ; Analog Switch Cap Type E Block Control Register 0  (RW)        
 0000           
 0083           ACE_AMD_CR1:   equ 83h         ; Analog Modulation Control Register 1               (RW)
 0070           ACE_AMD_CR1_AMOD3:    equ 70h    ; MASK: Column 3 Analog Modulation Control Signal Select
 000F           ACE_AMD_CR1_AMOD1:    equ 0Fh    ; MASK: Column 1 Analog Modulation Control Signal Select
 0000           
 0085           ACE_PWM_CR:    equ 85h         ; ADC PWM Control Register                           (RW)
 0038           ACE_PWM_CR_HIGH:      equ 38h    ; MASK: PWM High Time Control
 0006           ACE_PWM_CR_LOW:       equ 06h    ; MASK: PWM Low Time Control
 0001           ACE_PWM_CR_PWMEN:     equ 01h    ; MASK: PWM Enable/Disable
 0000           
 0086           ACE_ADC0_CR:   equ 86h         ; ADC Column 0 Configuration Register                (RW)
 0087           ACE_ADC1_CR:   equ 87h         ; ADC Column 1 Configuration Register                (RW)
 0080           ACE_ADC_CR_CMPST:     equ 80h    ; MASK: Comparator State
 0040           ACE_ADC_CR_LOREN:     equ 40h    ; MASK: ADC Current Range Control
 0020           ACE_ADC_CR_SHEN:      equ 20h    ; MASK: Sample And Hold Enable
 0008           ACE_ADC_CR_CBSRC:     equ 08h    ; MASK: Digital Comparator Bus Source
 0004           ACE_ADC_CR_AUTO:      equ 04h    ; MASK: Auto ADC Mode
 0001           ACE_ADC_CR_ADCEN:     equ 01h    ; MASK: ADC Enable
 0000           
 0089           ACE_CLK_CR0:   equ 89h         ; Analog Column Clock Control Register 0             (RW)
 00C0           ACE_CLK_CR0_ACOL3:    equ C0h    ; MASK: Clock Selection For Column 3
 0030           ACE_CLK_CR0_ACOL2:    equ 30h    ; MASK: Clock Selection For Column 2
 000C           ACE_CLK_CR0_ACOL1:    equ 0Ch    ; MASK: Clock Selection For Column 1
 0003           ACE_CLK_CR0_ACOL0:    equ 03h    ; MASK: Clock Selection For Column 0
 0000           
 008A           ACE_CLK_CR1:   equ 8Ah         ; Analog Column Clock Control Register 1             (RW)
 00F0           ACE_CLK_CR1_ACLK1:    equ F0h    ; MASK: Select The Clocking Source For Analog Clock 1
 000F           ACE_CLK_CR1_ACLK0:    equ 0Fh    ; MASK: Select The Clocking Source For Analog Clock 0
 0000           
 008B           ACE_CLK_CR3:   equ 8Bh         ; Analog Column Clock Control Register 3             (RW)
 0040           ACE_CLK_CR3_SYS1:     equ 40h    ; MASK: Column 1 Clock Selection
 0030           ACE_CLK_CR3_DIVCLK10: equ 30h    ; MASK: Column 1 Clock Divide Selection
 0004           ACE_CLK_CR3_SYS0:     equ 04h    ; MASK: Column 0 Clock Selection
 0003           ACE_CLK_CR3_DIVCLK0:  equ 03h    ; MASK: Column 0 Clock Divide Selection
 0000           
 008D           ACE01CR1:      equ 8Dh         ; Analog Continuous Time Type E Block Control Register 1               (RW)
 0040           ACE01CR1_COMPBUS:     equ 40h    ; MASK: Comparator Bus Output Enable/Disable
 0038           ACE01CR1_NMUX:        equ 38h    ; MASK: Encodeing For Negative Input Select
 0007           ACE01CR1_PMUX:        equ 07h    ; MASK: Encodeing For Positive Input Select
 0000           
 008E           ACE01CR2:      equ 8Eh         ; Analog Continuous Time Type E Block Control Register 2               (RW)
 0002           ACE01CR2_FULLRANGE:   equ 02h    ; MASK: Input Voltage Range Selection
 0001           ACE01CR2_PWR:         equ 01h    ; MASK: Power On/Off For Column Analog Blocks
 0000           
 008F           ASE11CR0:      equ 8Fh         ; Analog Switch Cap Type E Block Control Register 0  (RW)
 0080           ASECR_FVAL:           equ 80h    ; MASK: F Capacitor Value Section Bit
 0000           
 0091           DEC0_CR0:      equ 91h         ; Decimator 0 Control Register 0                     (RW)
 0092           DEC_CR3:       equ 92h         ; Decimator Control Register 3                       (RW)
 0095           DEC1_CR0:      equ 95h         ; Decimator 1 Control Register 0                     (RW)
 0096           DEC_CR4:       equ 96h         ; Decimator Control Register 4                       (RW)
 0099           DEC2_CR0:      equ 99h         ; Decimator 2 Control Register 0                     (RW)
 009A           DEC_CR5:       equ 9Ah         ; Decimator Control Register 5                       (RW)
 009D           DEC3_CR0:      equ 9Dh         ; Decimator Control Register 3                       (RW)
 0000           
 00A0           GDI_O_IN_CR:   equ A0h         ; Global Digital Interconnect Odd Input Register     (RW)
 00A1           GDI_E_IN_CR:   equ A1h         ; Global Digital Interconnect Even Input Register    (RW)
 0000           
 00A2           GDI_O_OU_CR:   equ A2h         ; Global Digital Interconnect Odd Output Register    (RW)
 00A3           GDI_E_OU_CR:   equ A3h         ; Global Digital Interconnect Even Output Register   (RW)
 0000           
 00A4           RTC_H:         equ A4h         ; Current RTC Hour Value Register                    (RW)
 00A5           RTC_M:         equ A5h         ; Current RTC Minute Value Register                  (RW) 
 00A6           RTC_S:         equ A6h         ; Current RTC Second Value Register                  (RW) 
 00A7           RTC_CR:        equ A7h         ; RTC Control Register                               (RW)
 00C0           RTC_CR_TREG:          equ C0h    ; MASK: Test Mode Select
 0020           RTC_CR_INT_EN:        equ 20h    ; MASK: RTC Interrupt Enable/Disable
 0010           RTC_CR_CLKSE:         equ 10h    ; MASK: RTC Clock Select
 000C           RTC_CR_INT_SEL:       equ 0Ch    ; MASK: Interrupt Select
 0002           RTC_CR_SYNCRD_EN:     equ 02h    ; MASK: Data Buffer Read
 0001           RTC_CR_RTC_EN:        equ 01h    ; MASK: RTC Enable/Disable
 0000           
 00A8           SADC_CR0:      equ A8h         ; SAR ADC Control Register 0                         (RW)
 0080           SADC_CR0_ADC_TST1:    equ 80h    ; MASK: Set SAR ADC Data Register to Write-Only
 0078           SADC_CR0_ADC_CHS:     equ 78h    ; MASK: Channel Selection
 0004           SADC_CR0_READY:       equ 04h    ; MASK: Set Data Ready Bit
 0002           SADC_CR0_START:       equ 02h    ; MASK: A-D Conversion Started
 0001           SADC_CR0_ADC_EN:      equ 01h    ; MASK: ADC Function Enable/Disable
 0000           
 00A9           SADC_CR1:      equ A9h         ; SAR ADC Control Register 1                         (RW)
 00C0           SADC_CR1_CVTMD:       equ C0h    ; MASK: SAR ADC Conversion Mode Select
 0030           SADC_CR1_TIGSEL:      equ 30h    ; MASK: Auto-Trigger Source Select
 000E           SADC_CR1_CLKSEL:      equ 0Eh    ; MASK: SAR ADC Clock Select
 0001           SADC_CR1_ALIGN_EN:    equ 01h    ; MASK: Auto-Align Function Enable/Disable
 0000           
 00AA           SADC_CR2:      equ AAh         ; SAR ADC Control Register 2                         (RW)
 0080           SADC_CR2_REFSEL:      equ 80h    ; MASK: External Vref Select
 0040           SADC_CR2_BUFEN:       equ 40h    ; MASK: Vref Buffer Enable/Disable
 0020           SADC_CR2_VDBEN:       equ 20h    ; MASK: ADC Comparator Voltage Doubler Enable/Disable
 0010           SADC_CR2_VDB_CLK:     equ 10h    ; MASK: VDB Clock Select
 0008           SADC_CR2_FREESUN:     equ 08h    ; MASK: ADC FREERUN Mode Enable/Disable
 0004           SADC_CR2_ADC_EXT_HALFVDD:  equ 04h    ; MASK: Vdd/2 Source Select
 0003           SADC_CR2_ADC_MODE:         equ 03h    ; MASK: Set ADC Mode
 0000           
 00AB           SADC_CR3:      equ ABh         ; SAR ADC Control Register 3                         (RW)
 0080           SADC_CR3_LALIGN:      equ 80h    ; MASK: Left-Justified Data Format Enable/Disable
 0007           SADC_CR3_ADC_TRIM0:   equ 07h    ; MASK: SAR ADC Trim Value
 0000            
 00AC           SADC_CR4:      equ ACh         ; SAR ADC Control Register 4                         (RW)
 0080           SADC_CR4_EXTREF:      equ 80h    ; MASK: External Vref Select
 0002           SADC_CR4_ADC_TST2:    equ 02h    ; MASK: Can Be Set Only In Test Mode
 0001           SADC_CR4_ADC_CMP:     equ 01h    ; MASK: ADC Comparator Output Data
 0000                                            ;       Only Active When ADC_TST2 is 1
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ D0h          ; Global Dig Interconnect Odd Inputs Reg             (RW)
 00D1           GDI_E_IN:     equ D1h          ; Global Dig Interconnect Even Inputs Reg            (RW)
 00D2           GDI_O_OU:     equ D2h          ; Global Dig Interconnect Odd Outputs Reg            (RW)
 00D3           GDI_E_OU:     equ D3h          ; Global Dig Interconnect Even Outputs Reg           (RW)
 0000           
 00D4           DEC0_CR:      equ D4h          ; Decimator 0 Control Register                       (RW)
 00D5           DEC1_CR:      equ D5h          ; Decimator 1 Control Register                       (RW)
 00D6           DEC2_CR:      equ D6h          ; Decimator 2 Control Register                       (RW)
 00D7           DEC3_CR:      equ D7h          ; Decimator 3 Control Register                       (RW)
 0000           
 00D8           MUX_CR0:      equ D8h          ; Analog Mux Port Bit Enables Register 0             (RW)
 00D9           MUX_CR1:      equ D9h          ; Analog Mux Port Bit Enables Register 1             (RW)
 00DA           MUX_CR2:      equ DAh          ; Analog Mux Port Bit Enables Register 2             (RW)
 00DB           MUX_CR3:      equ DBh          ; Analog Mux Port Bit Enables Register 3             (RW)
 00EC           MUX_CR4:      equ ECh          ; Analog Mux Port Bit Enables Register 4             (RW)
 00ED           MUX_CR5:      equ EDh          ; Analog Mux Port Bit Enables Register 5             (RW)
 0000           
 00DC           IDAC_CR1:     equ DCh          ; Analog Mux DAC Control Register 1                  (RW)
 00FD           IDAC_CR0:     equ FDh          ; Analog Mux DAC Control Register 0                  (RW)
 0080           IDAC_CR0_SPLIT_MUX:    equ 80h   ; MASK: Analog Mux Bus configuration
 0040           IDAC_CR0_MUXCLK_GE:    equ 40h   ; MASK: Global Enable Connection for MUXCLK1
 0030           IDAC_CR0_OSCMD0:       equ 30h   ; MASK: Analog Mux Bus 0 Reset Configuration
 0008           IDAC_CR0_IRANGE:       equ 08h   ; MASK: Sets the IDAC Range
 0006           IDAC_CR0_OSCMD1:       equ 06h   ; MASK: Analog Mux Bus 1 Reset Configuration 
 0001           IDAC_CR0_EN1:          equ 01h   ; MASK: IDAC 1 Function Enable/Disable
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register      (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4                     (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock Source (Deprecated)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock Source (Recommended)
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3                     (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0              (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h   ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h           ; ADC Column 0 Trim Register              (RW)
 00E6           ADC1_TR:      equ 0E6h           ; ADC Column 1 Trim Register              (RW)
 0000           
 00E7           IDAC_MODE:    equ 0E7h           ; IDAC Mode Register                      (RW)
 00F0           IDAC_MODE_IDAC0:      equ F0h    ; MASK: IDAC 0 Mode
 000F           IDAC_MODE_IDAC1:      equ 0Fh    ; MASK: IDAC 1 Mode
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (RW)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (RW)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (RW)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (RW)
 00EF           IMO_TR1:      equ 0EFh          ; Internal Main Oscillator Trim Register 1 (RW)
 0003           IMO_TR1_CATA_TRIM:    equ 03h    ; MASK: CATA Current Tuning Bits
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Flash Bank Select
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0003           SYSTEM_STACK_PAGE: equ 3   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C28045.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ; ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0003           CPU_CLOCK:				equ	3h		;CPU clock value
 0007           CPU_CLOCK_MASK:			equ	7h		;CPU clock mask
 0003           CPU_CLOCK_JUST:			equ	3h		;CPU clock value justified
 0000           SELECT_32K:				equ	0h		;32K select value
 0080           SELECT_32K_MASK:		equ	80h		;32K select mask
 0000           SELECT_32K_JUST:		equ	0h		;32K select value justified
 0000           PLL_MODE:				equ	0h		;PLL mode value
 0040           PLL_MODE_MASK:			equ	40h		;PLL mode mask
 0000           PLL_MODE_JUST:			equ	0h		;PLL mode value justified
 0000           
 0000           SLEEP_TIMER:			equ	0h		;Sleep Timer value
 0018           SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
 0000           SLEEP_TIMER_JUST:		equ	0h		;Sleep Timer value justified
 0000           
 0000           SLEEP_TIMER2:			equ	0h		;Sleep Extend value
 0010           SLEEP_TIMER_MASK2:		equ	10h		;Sleep Extend mask
 0000           SLEEP_TIMER_JUST2:		equ	0h		;Sleep Extend value justified
 0000           
 0001           SWITCH_MODE_PUMP:		equ	1h		;Switch Mode Pump setting
 0080           SWITCH_MODE_PUMP_MASK:	equ	80h		;Switch Mode Pump mask
 0080           SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
 0000           LVD_TBEN:               equ 0h   ; Low Voltage Throttle-back enable value
 0008           LVD_TBEN_MASK:          equ 8h  ; Low Voltage Throttle-back enable mask
 0000           LVD_TBEN_JUST:          equ 0h  ; Low Voltage Throttle-back enable justified
 0007           TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
 0007           TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
 0007           TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
 0000           
 0010           POWER_SETTING:			equ	10h
 0010           POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
 0010           POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
 0011           POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
 0008           POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
 0008           POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
 0009           POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
 0006           POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
 0004           POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
 0002           POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
 0001           POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
 0000           
 0001           COMM_RX_PRESENT:		equ	1		;1 = TRUE
 0000           WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
 0000           
 0009           CLOCK_DIV_VC1:			equ	9h	;VC1 clock divider
 00F0           CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
 0090           CLOCK_DIV_VC1_JUST:		equ	90h	;VC1 clock divider justified
 0009           CLOCK_DIV_VC2:			equ	9h	;VC2 clock divider
 000F           CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
 0009           CLOCK_DIV_VC2_JUST:		equ	9h	;VC2 clock divider justified
 0003           CLOCK_INPUT_VC3:		equ	3h	;VC3 clock source
 0003           CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
 0003           CLOCK_INPUT_VC3_JUST:	equ	3h	;VC3 clock source justified
 0005           CLOCK_DIV_VC3:			equ	5h	;VC3 clock divider
 00FF           CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
 0005           CLOCK_DIV_VC3_JUST:		equ	5h	;VC3 clock divider justified
 0005           ANALOG_POWER:			equ	5h	;Analog power control
 0007           ANALOG_POWER_MASK:		equ	7h	;Analog power control mask
 0005           ANALOG_POWER_JUST:		equ	5h	;Analog power control justified
 0001           OP_AMP_BIAS:			equ	1h	;Op amp bias level
 0040           OP_AMP_BIAS_MASK:		equ	40h	;Op amp bias level mask
 0040           OP_AMP_BIAS_JUST:		equ	40h	;Op amp bias level justified
 0002           REF_MUX:				equ	2h	;Ref mux setting
 0038           REF_MUX_MASK:			equ	38h	;Ref mux setting mask
 0010           REF_MUX_JUST:			equ	10h	;Ref mux setting justified
 0000           AGND_BYPASS:				equ	0h	;AGndBypass setting
 0040           AGND_BYPASS_MASK:			equ	40h	;AGndBypass setting mask
 0000           AGND_BYPASS_JUST:			equ	0h	;AGndBypass setting justified
 0000           SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
 0006           SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
 0000           SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
 0000           SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
 0001           SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
 0000           SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
 0000           ;
 0000           ; register initial values
 0000           ;
 0000           ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
 001F           PORT_0_GLOBAL_SELECT:	equ 1fh	;Port 0 global select register (PRT0GS)
 001E           PORT_0_DRIVE_0:			equ 1eh	;Port 0 drive mode 0 register (PRT0DM0)
 00E1           PORT_0_DRIVE_1:			equ e1h	;Port 0 drive mode 1 register (PRT0DM1)
 00E0           PORT_0_DRIVE_2:			equ e0h	;Port 0 drive mode 2 register (PRT0DM2)
 0000           PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
 0000           PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
 0000           PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
 0000           PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
 0000           PORT_1_DRIVE_0:			equ 0h	;Port 1 drive mode 0 register (PRT1DM0)
 00FF           PORT_1_DRIVE_1:			equ ffh	;Port 1 drive mode 1 register (PRT1DM1)
 00FF           PORT_1_DRIVE_2:			equ ffh	;Port 1 drive mode 2 register (PRT1DM2)
 0000           PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
 0000           PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
 0000           PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
 0000           PORT_2_GLOBAL_SELECT:	equ 0h	;Port 2 global select register (PRT2GS)
 0000           PORT_2_DRIVE_0:			equ 0h	;Port 2 drive mode 0 register (PRT2DM0)
 00FF           PORT_2_DRIVE_1:			equ ffh	;Port 2 drive mode 1 register (PRT2DM1)
 00FF           PORT_2_DRIVE_2:			equ ffh	;Port 2 drive mode 2 register (PRT2DM2)
 0000           PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
 0000           PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
 0000           PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
 0000           PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
 0000           PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
 0000           PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
 0000           PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
 0000           PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
 0000           PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
 0000           PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
 0000           PORT_4_GLOBAL_SELECT:	equ 0h	;Port 4 global select register (PRT4GS)
 0000           PORT_4_DRIVE_0:			equ 0h	;Port 4 drive mode 0 register (PRT4DM0)
 0000           PORT_4_DRIVE_1:			equ 0h	;Port 4 drive mode 1 register (PRT4DM1)
 0000           PORT_4_DRIVE_2:			equ 0h	;Port 4 drive mode 2 register (PRT4DM2)
 0000           PORT_4_INTENABLE:		equ 0h	;Port 4 interrupt enable register (PRT4IE)
 0000           PORT_4_INTCTRL_0:		equ 0h	;Port 4 interrupt control 0 register (PRT4IC0)
 0000           PORT_4_INTCTRL_1:		equ 0h	;Port 4 interrupt control 1 register (PRT4IC1)
 0000           PORT_5_GLOBAL_SELECT:	equ 0h	;Port 5 global select register (PRT5GS)
 0000           PORT_5_DRIVE_0:			equ 0h	;Port 5 drive mode 0 register (PRT5DM0)
 0000           PORT_5_DRIVE_1:			equ 0h	;Port 5 drive mode 1 register (PRT5DM1)
 0000           PORT_5_DRIVE_2:			equ 0h	;Port 5 drive mode 2 register (PRT5DM2)
 0000           PORT_5_INTENABLE:		equ 0h	;Port 5 interrupt enable register (PRT5IE)
 0000           PORT_5_INTCTRL_0:		equ 0h	;Port 5 interrupt control 0 register (PRT5IC0)
 0000           PORT_5_INTCTRL_1:		equ 0h	;Port 5 interrupt control 1 register (PRT5IC1)
 0000           
 0000           ; end of file GlobalParams.inc
 0000           
                export LoadConfigInit
                export _LoadConfigInit
                export LoadConfig_waiting
                export _LoadConfig_waiting
                export UnloadConfig_waiting
                export _UnloadConfig_waiting
                export ReloadConfig_waiting
                export _ReloadConfig_waiting
                export LoadConfig_hello
                export _LoadConfig_hello
                export UnloadConfig_hello
                export _UnloadConfig_hello
                export LoadConfig_initial
                export _LoadConfig_initial
                export UnloadConfig_initial
                export _UnloadConfig_initial
                export LoadConfig_my_response
                export _LoadConfig_my_response
                export UnloadConfig_my_response
                export _UnloadConfig_my_response
                export LoadConfig_response1
                export _LoadConfig_response1
                export UnloadConfig_response1
                export _UnloadConfig_response1
                export LoadConfig_response2
                export _LoadConfig_response2
                export UnloadConfig_response2
                export _UnloadConfig_response2
                export LoadConfig_response3
                export _LoadConfig_response3
                export UnloadConfig_response3
                export _UnloadConfig_response3
                export LoadConfig_response4
                export _LoadConfig_response4
                export UnloadConfig_response4
                export _UnloadConfig_response4
                export LoadConfig_servo_transmit
                export _LoadConfig_servo_transmit
                export UnloadConfig_servo_transmit
                export _UnloadConfig_servo_transmit
                export UnloadConfig_Total
                export _UnloadConfig_Total
                export ACTIVE_CONFIG_STATUS
                
                export NO_SHADOW
                export _NO_SHADOW
                
 0010           FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
 00FF           END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
 0000           
                AREA psoc_config(rom, rel)
                
                ;---------------------------------------------------------------------------
                ; LoadConfigInit - Establish the start-up configuration (except for a few
                ;                  parameters handled by boot code, like CPU speed). This
                ;                  function can be called from user code, but typically it
                ;                  is only called from boot.
                ;
                ;       INPUTS: None.
                ;      RETURNS: Nothing.
                ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                ;               In the large memory model currently only the page
                ;               pointer registers listed below are modified.  This does
                ;               not guarantee that in future implementations of this
                ;               function other page pointer registers will not be
                ;               modified.
                ;          
                ;               Page Pointer Registers Modified: 
                ;               CUR_PP
                ;
 0000           _LoadConfigInit:
 0000            LoadConfigInit:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 0003 550000            mov             [ACTIVE_CONFIG_STATUS], 0
 0006 550100            mov             [ACTIVE_CONFIG_STATUS+1], 0
 0009           
 0009 7C0010            lcall   LoadConfig_waiting
 000C 7C0000            lcall   LoadConfigTBL_waiting_Ordered
 000F           
 000F           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 000F 7F            ret
 0010           
 0010           ;---------------------------------------------------------------------------
 0010           ; Load Configuration waiting
 0010           ;
 0010           ;    Load configuration registers for waiting.
 0010           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0010           ;
 0010           ;       INPUTS: None.
 0010           ;      RETURNS: Nothing.
 0010           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0010           ;               modified as may the Page Pointer registers!
 0010           ;               In the large memory model currently only the page
 0010           ;               pointer registers listed below are modified.  This does
 0010           ;               not guarantee that in future implementations of this
 0010           ;               function other page pointer registers will not be
 0010           ;               modified.
 0010           ;          
 0010           ;               Page Pointer Registers Modified: 
 0010           ;               CUR_PP
 0010           ;
 0010           _LoadConfig_waiting:
 0010            LoadConfig_waiting:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0010 7110          or    F, FLAG_XIO_MASK
 0012           
 0012 10                push    x
 0013 70EF          and   F, ~FLAG_XIO_MASK
 0015 5000          mov     a, 0                    ; Specify bank 0
 0017 67            asr     a                       ; Store in carry flag
 0018                                               ; Load bank 0 table:
 0018 5000          mov     A, >LoadConfigTBL_waiting_Bank0
 001A 5700          mov     X, <LoadConfigTBL_waiting_Bank0
 001C 7C057C        lcall   LoadConfig              ; Load the bank 0 values
 001F           
 001F 5001          mov     a, 1                    ; Specify bank 1
 0021 67            asr     a                       ; Store in carry flag
 0022                                               ; Load bank 1 table:
 0022 5000          mov     A, >LoadConfigTBL_waiting_Bank1
 0024 5700          mov     X, <LoadConfigTBL_waiting_Bank1
 0026 7C057C        lcall   LoadConfig              ; Load the bank 1 values
 0029           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0029 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 002C 2E0001            or              [ACTIVE_CONFIG_STATUS+waiting_ADDR_OFF], waiting_BIT
 002F 70EF          and   F, ~FLAG_XIO_MASK
 0031 20                pop             x
 0032           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0032 7F            ret
 0033           
 0033           ;---------------------------------------------------------------------------
 0033           ; Reload Configuration waiting
 0033           ;
 0033           ;    Reload configuration registers for waiting.
 0033           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0033           ;
 0033           ;       INPUTS: None.
 0033           ;      RETURNS: Nothing.
 0033           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0033           ;               modified as may the Page Pointer registers!
 0033           ;               In the large memory model currently only the page
 0033           ;               pointer registers listed below are modified.  This does
 0033           ;               not guarantee that in future implementations of this
 0033           ;               function other page pointer registers will not be
 0033           ;               modified.
 0033           ;          
 0033           ;               Page Pointer Registers Modified: 
 0033           ;               CUR_PP
 0033           ;
 0033           _ReloadConfig_waiting:
 0033            ReloadConfig_waiting:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0033 10                push    x
 0034 70EF          and   F, ~FLAG_XIO_MASK
 0036 5000          mov     a, 0                    ; Specify bank 0
 0038 67            asr     a                       ; Store in carry flag
 0039                                               ; Bank 0 table address:
 0039 5000          mov     A, >ReloadConfigTBL_waiting_Bank0
 003B 5700          mov     X, <ReloadConfigTBL_waiting_Bank0
 003D 7C057C        lcall   LoadConfig              ; Reload the bank 0 values
 0040           
 0040 5001          mov     a, 1                    ; Specify bank 1
 0042 67            asr     a                       ; Store in carry flag
 0043                                               ; Bank 1 table address:
 0043 5000          mov     A, >ReloadConfigTBL_waiting_Bank1
 0045 5700          mov     X, <ReloadConfigTBL_waiting_Bank1
 0047 7C057C        lcall   LoadConfig              ; Reload the bank 1 values
 004A           
 004A           ; set config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 004A 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 004D 2E0001            or              [ACTIVE_CONFIG_STATUS+waiting_ADDR_OFF], waiting_BIT
 0050 70EF          and   F, ~FLAG_XIO_MASK
 0052 20                pop             x
 0053           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0053 7F            ret
 0054           
 0054           ;---------------------------------------------------------------------------
 0054           ; Unload Configuration waiting
 0054           ;
 0054           ;    Reset configuration registers for waiting
 0054           ;    to their values as initially configured.
 0054           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0054           ;
 0054           ;       INPUTS: None.
 0054           ;      RETURNS: Nothing.
 0054           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0054           ;               modified as may the Page Pointer registers!
 0054           ;               In the large memory model currently only the page
 0054           ;               pointer registers listed below are modified.  This does
 0054           ;               not guarantee that in future implementations of this
 0054           ;               function other page pointer registers will not be
 0054           ;               modified.
 0054           ;          
 0054           ;               Page Pointer Registers Modified: 
 0054           ;               CUR_PP
 0054           ;
 0054           _UnloadConfig_waiting:
 0054            UnloadConfig_waiting:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0054 10                push    x
 0055 70EF          and   F, ~FLAG_XIO_MASK
 0057 5000          mov     a, 0                    ; Specify bank 0
 0059 67            asr     a                       ; Store in carry flag
 005A                                               ; Bank 0 table address:
 005A 5000          mov     A, >UnloadConfigTBL_waiting_Bank0
 005C 5700          mov     X, <UnloadConfigTBL_waiting_Bank0
 005E 7C057C        lcall   LoadConfig              ; Unload the bank 0 values
 0061           
 0061 5001          mov     a, 1                    ; Specify bank 1
 0063 67            asr     a                       ; Store in carry flag
 0064                                               ; Bank 1 table address:
 0064 5000          mov     A, >UnloadConfigTBL_waiting_Bank1
 0066 5700          mov     X, <UnloadConfigTBL_waiting_Bank1
 0068 7C057C        lcall   LoadConfig              ; Unload the bank 1 values
 006B           
 006B 70EF          and   F, ~FLAG_XIO_MASK
 006D           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 006D 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 0070 2600FE            and             [ACTIVE_CONFIG_STATUS+waiting_ADDR_OFF], ~waiting_BIT
 0073 70EF          and   F, ~FLAG_XIO_MASK
 0075 20                pop             x
 0076           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0076 7F            ret
 0077           
 0077           ;---------------------------------------------------------------------------
 0077           ; Load Configuration hello
 0077           ;
 0077           ;    Load configuration registers for hello.
 0077           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0077           ;
 0077           ;       INPUTS: None.
 0077           ;      RETURNS: Nothing.
 0077           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0077           ;               modified as may the Page Pointer registers!
 0077           ;               In the large memory model currently only the page
 0077           ;               pointer registers listed below are modified.  This does
 0077           ;               not guarantee that in future implementations of this
 0077           ;               function other page pointer registers will not be
 0077           ;               modified.
 0077           ;          
 0077           ;               Page Pointer Registers Modified: 
 0077           ;               CUR_PP
 0077           ;
 0077           _LoadConfig_hello:
 0077            LoadConfig_hello:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0077 7110          or    F, FLAG_XIO_MASK
 0079           ; writing Port_0_DriveMode_0 register
 0079 4100E1            and             reg[ 0h], ~1eh
 007C           ; writing Port_0_DriveMode_1 register
 007C 4101E1            and             reg[ 1h], ~1eh
 007F 43011E            or              reg[ 1h], 1eh
 0082           ; writing Port_0_DriveMode_2 register
 0082 70EF          and   F, ~FLAG_XIO_MASK
 0084 4103FE            and             reg[ 3h], ~ 1h
 0087 430301            or              reg[ 3h],  1h
 008A           ; writing Port_0_GlobalSelect register
 008A 4102FE            and             reg[ 2h], ~ 1h
 008D           ; writing Row_0_LogicSelect_0 register
 008D 41B3F0            and             reg[b3h], ~ fh
 0090 43B303            or              reg[b3h],  3h
 0093           ; writing Row_0_LogicSelect_1 register
 0093 41B4F0            and             reg[b4h], ~ fh
 0096 43B403            or              reg[b4h],  3h
 0099           ; writing Row_0_OutputDrive_0 register
 0099 41B5ED            and             reg[b5h], ~12h
 009C           ; writing Row_0_OutputDrive_1 register
 009C 41B6EE            and             reg[b6h], ~11h
 009F           ; writing Row_1_InputMux register
 009F 41B83F            and             reg[b8h], ~c0h
 00A2           
 00A2 10                push    x
 00A3 70EF          and   F, ~FLAG_XIO_MASK
 00A5 5000          mov     a, 0                    ; Specify bank 0
 00A7 67            asr     a                       ; Store in carry flag
 00A8                                               ; Load bank 0 table:
 00A8 5000          mov     A, >LoadConfigTBL_hello_Bank0
 00AA 5700          mov     X, <LoadConfigTBL_hello_Bank0
 00AC 7C057C        lcall   LoadConfig              ; Load the bank 0 values
 00AF           
 00AF 5001          mov     a, 1                    ; Specify bank 1
 00B1 67            asr     a                       ; Store in carry flag
 00B2                                               ; Load bank 1 table:
 00B2 5000          mov     A, >LoadConfigTBL_hello_Bank1
 00B4 5700          mov     X, <LoadConfigTBL_hello_Bank1
 00B6 7C057C        lcall   LoadConfig              ; Load the bank 1 values
 00B9           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00B9 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 00BC 2E0002            or              [ACTIVE_CONFIG_STATUS+hello_ADDR_OFF], hello_BIT
 00BF 70EF          and   F, ~FLAG_XIO_MASK
 00C1 20                pop             x
 00C2           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00C2 7F            ret
 00C3           
 00C3           ;---------------------------------------------------------------------------
 00C3           ; Unload Configuration hello
 00C3           ;
 00C3           ;    Reset configuration registers for hello
 00C3           ;    to their values as initially configured.
 00C3           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 00C3           ;
 00C3           ;       INPUTS: None.
 00C3           ;      RETURNS: Nothing.
 00C3           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 00C3           ;               modified as may the Page Pointer registers!
 00C3           ;               In the large memory model currently only the page
 00C3           ;               pointer registers listed below are modified.  This does
 00C3           ;               not guarantee that in future implementations of this
 00C3           ;               function other page pointer registers will not be
 00C3           ;               modified.
 00C3           ;          
 00C3           ;               Page Pointer Registers Modified: 
 00C3           ;               CUR_PP
 00C3           ;
 00C3           _UnloadConfig_hello:
 00C3            UnloadConfig_hello:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 00C3 10                push    x
 00C4 70EF          and   F, ~FLAG_XIO_MASK
 00C6 5000          mov     a, 0                    ; Specify bank 0
 00C8 67            asr     a                       ; Store in carry flag
 00C9                                               ; Bank 0 table address:
 00C9 5000          mov     A, >UnloadConfigTBL_hello_Bank0
 00CB 5700          mov     X, <UnloadConfigTBL_hello_Bank0
 00CD 7C057C        lcall   LoadConfig              ; Unload the bank 0 values
 00D0           
 00D0 5001          mov     a, 1                    ; Specify bank 1
 00D2 67            asr     a                       ; Store in carry flag
 00D3                                               ; Bank 1 table address:
 00D3 5000          mov     A, >UnloadConfigTBL_hello_Bank1
 00D5 5700          mov     X, <UnloadConfigTBL_hello_Bank1
 00D7 7C057C        lcall   LoadConfig              ; Unload the bank 1 values
 00DA           
 00DA 70EF          and   F, ~FLAG_XIO_MASK
 00DC           ; writing Row_0_LogicSelect_0 register
 00DC 41B3F0            and             reg[b3h], ~ fh
 00DF 43B305            or              reg[b3h],  5h
 00E2           ; writing Row_0_LogicSelect_1 register
 00E2 41B4F0            and             reg[b4h], ~ fh
 00E5 43B405            or              reg[b4h],  5h
 00E8           ; writing Row_0_OutputDrive_0 register
 00E8 41B5ED            and             reg[b5h], ~12h
 00EB 43B512            or              reg[b5h], 12h
 00EE           ; writing Row_0_OutputDrive_1 register
 00EE 41B6EE            and             reg[b6h], ~11h
 00F1 43B611            or              reg[b6h], 11h
 00F4           ; writing Row_1_InputMux register
 00F4 41B83F            and             reg[b8h], ~c0h
 00F7 43B840            or              reg[b8h], 40h
 00FA           ; writing Port_0_GlobalSelect register
 00FA 4102FE            and             reg[ 2h], ~ 1h
 00FD 430201            or              reg[ 2h],  1h
 0100           ; writing Port_0_DriveMode_2 register
 0100 4103FE            and             reg[ 3h], ~ 1h
 0103           ; writing Port_0_DriveMode_1 register
 0103 7110          or    F, FLAG_XIO_MASK
 0105 4101E1            and             reg[ 1h], ~1eh
 0108           ; writing Port_0_DriveMode_0 register
 0108 4100E1            and             reg[ 0h], ~1eh
 010B 43001E            or              reg[ 0h], 1eh
 010E 70EF          and   F, ~FLAG_XIO_MASK
 0110           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0110 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 0113 2600FD            and             [ACTIVE_CONFIG_STATUS+hello_ADDR_OFF], ~hello_BIT
 0116 70EF          and   F, ~FLAG_XIO_MASK
 0118 20                pop             x
 0119           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0119 7F            ret
 011A           
 011A           ;---------------------------------------------------------------------------
 011A           ; Load Configuration initial
 011A           ;
 011A           ;    Load configuration registers for initial.
 011A           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 011A           ;
 011A           ;       INPUTS: None.
 011A           ;      RETURNS: Nothing.
 011A           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 011A           ;               modified as may the Page Pointer registers!
 011A           ;               In the large memory model currently only the page
 011A           ;               pointer registers listed below are modified.  This does
 011A           ;               not guarantee that in future implementations of this
 011A           ;               function other page pointer registers will not be
 011A           ;               modified.
 011A           ;          
 011A           ;               Page Pointer Registers Modified: 
 011A           ;               CUR_PP
 011A           ;
 011A           _LoadConfig_initial:
 011A            LoadConfig_initial:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 011A 7110          or    F, FLAG_XIO_MASK
 011C           ; writing Port_0_DriveMode_0 register
 011C 4100E1            and             reg[ 0h], ~1eh
 011F           ; writing Port_0_DriveMode_1 register
 011F 4101E1            and             reg[ 1h], ~1eh
 0122 43011E            or              reg[ 1h], 1eh
 0125           ; writing Port_0_DriveMode_2 register
 0125 70EF          and   F, ~FLAG_XIO_MASK
 0127 4103E1            and             reg[ 3h], ~1eh
 012A 43031E            or              reg[ 3h], 1eh
 012D           ; writing Port_0_GlobalSelect register
 012D 4102E1            and             reg[ 2h], ~1eh
 0130           ; writing Row_0_LogicSelect_0 register
 0130 41B3F0            and             reg[b3h], ~ fh
 0133 43B303            or              reg[b3h],  3h
 0136           ; writing Row_0_LogicSelect_1 register
 0136 41B4F0            and             reg[b4h], ~ fh
 0139 43B403            or              reg[b4h],  3h
 013C           ; writing Row_0_OutputDrive_0 register
 013C 41B5ED            and             reg[b5h], ~12h
 013F           ; writing Row_0_OutputDrive_1 register
 013F 41B6EE            and             reg[b6h], ~11h
 0142           
 0142 10                push    x
 0143 70EF          and   F, ~FLAG_XIO_MASK
 0145 5000          mov     a, 0                    ; Specify bank 0
 0147 67            asr     a                       ; Store in carry flag
 0148                                               ; Load bank 0 table:
 0148 5000          mov     A, >LoadConfigTBL_initial_Bank0
 014A 5700          mov     X, <LoadConfigTBL_initial_Bank0
 014C 7C057C        lcall   LoadConfig              ; Load the bank 0 values
 014F           
 014F 5001          mov     a, 1                    ; Specify bank 1
 0151 67            asr     a                       ; Store in carry flag
 0152                                               ; Load bank 1 table:
 0152 5000          mov     A, >LoadConfigTBL_initial_Bank1
 0154 5700          mov     X, <LoadConfigTBL_initial_Bank1
 0156 7C057C        lcall   LoadConfig              ; Load the bank 1 values
 0159           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0159 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 015C 2E0004            or              [ACTIVE_CONFIG_STATUS+initial_ADDR_OFF], initial_BIT
 015F 70EF          and   F, ~FLAG_XIO_MASK
 0161 20                pop             x
 0162           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0162 7F            ret
 0163           
 0163           ;---------------------------------------------------------------------------
 0163           ; Unload Configuration initial
 0163           ;
 0163           ;    Reset configuration registers for initial
 0163           ;    to their values as initially configured.
 0163           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0163           ;
 0163           ;       INPUTS: None.
 0163           ;      RETURNS: Nothing.
 0163           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0163           ;               modified as may the Page Pointer registers!
 0163           ;               In the large memory model currently only the page
 0163           ;               pointer registers listed below are modified.  This does
 0163           ;               not guarantee that in future implementations of this
 0163           ;               function other page pointer registers will not be
 0163           ;               modified.
 0163           ;          
 0163           ;               Page Pointer Registers Modified: 
 0163           ;               CUR_PP
 0163           ;
 0163           _UnloadConfig_initial:
 0163            UnloadConfig_initial:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0163 10                push    x
 0164 70EF          and   F, ~FLAG_XIO_MASK
 0166 5000          mov     a, 0                    ; Specify bank 0
 0168 67            asr     a                       ; Store in carry flag
 0169                                               ; Bank 0 table address:
 0169 5000          mov     A, >UnloadConfigTBL_initial_Bank0
 016B 5700          mov     X, <UnloadConfigTBL_initial_Bank0
 016D 7C057C        lcall   LoadConfig              ; Unload the bank 0 values
 0170           
 0170 5001          mov     a, 1                    ; Specify bank 1
 0172 67            asr     a                       ; Store in carry flag
 0173                                               ; Bank 1 table address:
 0173 5000          mov     A, >UnloadConfigTBL_initial_Bank1
 0175 5700          mov     X, <UnloadConfigTBL_initial_Bank1
 0177 7C057C        lcall   LoadConfig              ; Unload the bank 1 values
 017A           
 017A 70EF          and   F, ~FLAG_XIO_MASK
 017C           ; writing Row_0_LogicSelect_0 register
 017C 41B3F0            and             reg[b3h], ~ fh
 017F 43B305            or              reg[b3h],  5h
 0182           ; writing Row_0_LogicSelect_1 register
 0182 41B4F0            and             reg[b4h], ~ fh
 0185 43B405            or              reg[b4h],  5h
 0188           ; writing Row_0_OutputDrive_0 register
 0188 41B5ED            and             reg[b5h], ~12h
 018B 43B512            or              reg[b5h], 12h
 018E           ; writing Row_0_OutputDrive_1 register
 018E 41B6EE            and             reg[b6h], ~11h
 0191 43B611            or              reg[b6h], 11h
 0194           ; writing Port_0_GlobalSelect register
 0194 4102E1            and             reg[ 2h], ~1eh
 0197 43021E            or              reg[ 2h], 1eh
 019A           ; writing Port_0_DriveMode_2 register
 019A 4103E1            and             reg[ 3h], ~1eh
 019D           ; writing Port_0_DriveMode_1 register
 019D 7110          or    F, FLAG_XIO_MASK
 019F 4101E1            and             reg[ 1h], ~1eh
 01A2           ; writing Port_0_DriveMode_0 register
 01A2 4100E1            and             reg[ 0h], ~1eh
 01A5 43001E            or              reg[ 0h], 1eh
 01A8 70EF          and   F, ~FLAG_XIO_MASK
 01AA           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01AA 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 01AD 2600FB            and             [ACTIVE_CONFIG_STATUS+initial_ADDR_OFF], ~initial_BIT
 01B0 70EF          and   F, ~FLAG_XIO_MASK
 01B2 20                pop             x
 01B3           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01B3 7F            ret
 01B4           
 01B4           ;---------------------------------------------------------------------------
 01B4           ; Load Configuration my_response
 01B4           ;
 01B4           ;    Load configuration registers for my_response.
 01B4           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 01B4           ;
 01B4           ;       INPUTS: None.
 01B4           ;      RETURNS: Nothing.
 01B4           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 01B4           ;               modified as may the Page Pointer registers!
 01B4           ;               In the large memory model currently only the page
 01B4           ;               pointer registers listed below are modified.  This does
 01B4           ;               not guarantee that in future implementations of this
 01B4           ;               function other page pointer registers will not be
 01B4           ;               modified.
 01B4           ;          
 01B4           ;               Page Pointer Registers Modified: 
 01B4           ;               CUR_PP
 01B4           ;
 01B4           _LoadConfig_my_response:
 01B4            LoadConfig_my_response:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01B4 7110          or    F, FLAG_XIO_MASK
 01B6           ; writing Port_0_DriveMode_0 register
 01B6 4100FE            and             reg[ 0h], ~ 1h
 01B9 430001            or              reg[ 0h],  1h
 01BC           ; writing Port_0_DriveMode_1 register
 01BC 4101FE            and             reg[ 1h], ~ 1h
 01BF           ; writing Row_0_OutputDrive_0 register
 01BF 70EF          and   F, ~FLAG_XIO_MASK
 01C1 41B5FE            and             reg[b5h], ~ 1h
 01C4 43B501            or              reg[b5h],  1h
 01C7           
 01C7 10                push    x
 01C8 70EF          and   F, ~FLAG_XIO_MASK
 01CA 5000          mov     a, 0                    ; Specify bank 0
 01CC 67            asr     a                       ; Store in carry flag
 01CD                                               ; Load bank 0 table:
 01CD 5000          mov     A, >LoadConfigTBL_my_response_Bank0
 01CF 5700          mov     X, <LoadConfigTBL_my_response_Bank0
 01D1 7C057C        lcall   LoadConfig              ; Load the bank 0 values
 01D4           
 01D4 5001          mov     a, 1                    ; Specify bank 1
 01D6 67            asr     a                       ; Store in carry flag
 01D7                                               ; Load bank 1 table:
 01D7 5000          mov     A, >LoadConfigTBL_my_response_Bank1
 01D9 5700          mov     X, <LoadConfigTBL_my_response_Bank1
 01DB 7C057C        lcall   LoadConfig              ; Load the bank 1 values
 01DE           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01DE 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 01E1 2E0008            or              [ACTIVE_CONFIG_STATUS+my_response_ADDR_OFF], my_response_BIT
 01E4 70EF          and   F, ~FLAG_XIO_MASK
 01E6 20                pop             x
 01E7           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01E7 7F            ret
 01E8           
 01E8           ;---------------------------------------------------------------------------
 01E8           ; Unload Configuration my_response
 01E8           ;
 01E8           ;    Reset configuration registers for my_response
 01E8           ;    to their values as initially configured.
 01E8           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 01E8           ;
 01E8           ;       INPUTS: None.
 01E8           ;      RETURNS: Nothing.
 01E8           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 01E8           ;               modified as may the Page Pointer registers!
 01E8           ;               In the large memory model currently only the page
 01E8           ;               pointer registers listed below are modified.  This does
 01E8           ;               not guarantee that in future implementations of this
 01E8           ;               function other page pointer registers will not be
 01E8           ;               modified.
 01E8           ;          
 01E8           ;               Page Pointer Registers Modified: 
 01E8           ;               CUR_PP
 01E8           ;
 01E8           _UnloadConfig_my_response:
 01E8            UnloadConfig_my_response:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 01E8 10                push    x
 01E9 70EF          and   F, ~FLAG_XIO_MASK
 01EB 5000          mov     a, 0                    ; Specify bank 0
 01ED 67            asr     a                       ; Store in carry flag
 01EE                                               ; Bank 0 table address:
 01EE 5000          mov     A, >UnloadConfigTBL_my_response_Bank0
 01F0 5700          mov     X, <UnloadConfigTBL_my_response_Bank0
 01F2 7C057C        lcall   LoadConfig              ; Unload the bank 0 values
 01F5           
 01F5 5001          mov     a, 1                    ; Specify bank 1
 01F7 67            asr     a                       ; Store in carry flag
 01F8                                               ; Bank 1 table address:
 01F8 5000          mov     A, >UnloadConfigTBL_my_response_Bank1
 01FA 5700          mov     X, <UnloadConfigTBL_my_response_Bank1
 01FC 7C057C        lcall   LoadConfig              ; Unload the bank 1 values
 01FF           
 01FF 70EF          and   F, ~FLAG_XIO_MASK
 0201           ; writing Row_0_OutputDrive_0 register
 0201 41B5FE            and             reg[b5h], ~ 1h
 0204           ; writing Port_0_DriveMode_1 register
 0204 7110          or    F, FLAG_XIO_MASK
 0206 4101FE            and             reg[ 1h], ~ 1h
 0209 430101            or              reg[ 1h],  1h
 020C           ; writing Port_0_DriveMode_0 register
 020C 4100FE            and             reg[ 0h], ~ 1h
 020F 70EF          and   F, ~FLAG_XIO_MASK
 0211           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0211 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 0214 2600F7            and             [ACTIVE_CONFIG_STATUS+my_response_ADDR_OFF], ~my_response_BIT
 0217 70EF          and   F, ~FLAG_XIO_MASK
 0219 20                pop             x
 021A           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 021A 7F            ret
 021B           
 021B           ;---------------------------------------------------------------------------
 021B           ; Load Configuration response1
 021B           ;
 021B           ;    Load configuration registers for response1.
 021B           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 021B           ;
 021B           ;       INPUTS: None.
 021B           ;      RETURNS: Nothing.
 021B           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 021B           ;               modified as may the Page Pointer registers!
 021B           ;               In the large memory model currently only the page
 021B           ;               pointer registers listed below are modified.  This does
 021B           ;               not guarantee that in future implementations of this
 021B           ;               function other page pointer registers will not be
 021B           ;               modified.
 021B           ;          
 021B           ;               Page Pointer Registers Modified: 
 021B           ;               CUR_PP
 021B           ;
 021B           _LoadConfig_response1:
 021B            LoadConfig_response1:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 021B 7110          or    F, FLAG_XIO_MASK
 021D           ; writing Port_0_DriveMode_0 register
 021D 4100E0            and             reg[ 0h], ~1fh
 0220 430001            or              reg[ 0h],  1h
 0223           ; writing Port_0_DriveMode_1 register
 0223 4101E0            and             reg[ 1h], ~1fh
 0226 43011E            or              reg[ 1h], 1eh
 0229           ; writing Port_0_DriveMode_2 register
 0229 70EF          and   F, ~FLAG_XIO_MASK
 022B 4103E3            and             reg[ 3h], ~1ch
 022E 43031C            or              reg[ 3h], 1ch
 0231           ; writing Port_0_GlobalSelect register
 0231 4102E3            and             reg[ 2h], ~1ch
 0234           ; writing Row_0_LogicSelect_0 register
 0234 41B3F0            and             reg[b3h], ~ fh
 0237 43B303            or              reg[b3h],  3h
 023A           ; writing Row_0_LogicSelect_1 register
 023A 41B4F0            and             reg[b4h], ~ fh
 023D 43B403            or              reg[b4h],  3h
 0240           ; writing Row_0_OutputDrive_0 register
 0240 41B5EC            and             reg[b5h], ~13h
 0243 43B501            or              reg[b5h],  1h
 0246           ; writing Row_0_OutputDrive_1 register
 0246 41B6EE            and             reg[b6h], ~11h
 0249           
 0249 10                push    x
 024A 70EF          and   F, ~FLAG_XIO_MASK
 024C 5000          mov     a, 0                    ; Specify bank 0
 024E 67            asr     a                       ; Store in carry flag
 024F                                               ; Load bank 0 table:
 024F 5000          mov     A, >LoadConfigTBL_response1_Bank0
 0251 5700          mov     X, <LoadConfigTBL_response1_Bank0
 0253 7C057C        lcall   LoadConfig              ; Load the bank 0 values
 0256           
 0256 5001          mov     a, 1                    ; Specify bank 1
 0258 67            asr     a                       ; Store in carry flag
 0259                                               ; Load bank 1 table:
 0259 5000          mov     A, >LoadConfigTBL_response1_Bank1
 025B 5700          mov     X, <LoadConfigTBL_response1_Bank1
 025D 7C057C        lcall   LoadConfig              ; Load the bank 1 values
 0260           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0260 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 0263 2E0010            or              [ACTIVE_CONFIG_STATUS+response1_ADDR_OFF], response1_BIT
 0266 70EF          and   F, ~FLAG_XIO_MASK
 0268 20                pop             x
 0269           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0269 7F            ret
 026A           
 026A           ;---------------------------------------------------------------------------
 026A           ; Unload Configuration response1
 026A           ;
 026A           ;    Reset configuration registers for response1
 026A           ;    to their values as initially configured.
 026A           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 026A           ;
 026A           ;       INPUTS: None.
 026A           ;      RETURNS: Nothing.
 026A           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 026A           ;               modified as may the Page Pointer registers!
 026A           ;               In the large memory model currently only the page
 026A           ;               pointer registers listed below are modified.  This does
 026A           ;               not guarantee that in future implementations of this
 026A           ;               function other page pointer registers will not be
 026A           ;               modified.
 026A           ;          
 026A           ;               Page Pointer Registers Modified: 
 026A           ;               CUR_PP
 026A           ;
 026A           _UnloadConfig_response1:
 026A            UnloadConfig_response1:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 026A 10                push    x
 026B 70EF          and   F, ~FLAG_XIO_MASK
 026D 5000          mov     a, 0                    ; Specify bank 0
 026F 67            asr     a                       ; Store in carry flag
 0270                                               ; Bank 0 table address:
 0270 5000          mov     A, >UnloadConfigTBL_response1_Bank0
 0272 5700          mov     X, <UnloadConfigTBL_response1_Bank0
 0274 7C057C        lcall   LoadConfig              ; Unload the bank 0 values
 0277           
 0277 5001          mov     a, 1                    ; Specify bank 1
 0279 67            asr     a                       ; Store in carry flag
 027A                                               ; Bank 1 table address:
 027A 5000          mov     A, >UnloadConfigTBL_response1_Bank1
 027C 5700          mov     X, <UnloadConfigTBL_response1_Bank1
 027E 7C057C        lcall   LoadConfig              ; Unload the bank 1 values
 0281           
 0281 70EF          and   F, ~FLAG_XIO_MASK
 0283           ; writing Row_0_LogicSelect_0 register
 0283 41B3F0            and             reg[b3h], ~ fh
 0286 43B305            or              reg[b3h],  5h
 0289           ; writing Row_0_LogicSelect_1 register
 0289 41B4F0            and             reg[b4h], ~ fh
 028C 43B405            or              reg[b4h],  5h
 028F           ; writing Row_0_OutputDrive_0 register
 028F 41B5EC            and             reg[b5h], ~13h
 0292 43B512            or              reg[b5h], 12h
 0295           ; writing Row_0_OutputDrive_1 register
 0295 41B6EE            and             reg[b6h], ~11h
 0298 43B611            or              reg[b6h], 11h
 029B           ; writing Port_0_GlobalSelect register
 029B 4102E3            and             reg[ 2h], ~1ch
 029E 43021C            or              reg[ 2h], 1ch
 02A1           ; writing Port_0_DriveMode_2 register
 02A1 4103E3            and             reg[ 3h], ~1ch
 02A4           ; writing Port_0_DriveMode_1 register
 02A4 7110          or    F, FLAG_XIO_MASK
 02A6 4101E0            and             reg[ 1h], ~1fh
 02A9 430101            or              reg[ 1h],  1h
 02AC           ; writing Port_0_DriveMode_0 register
 02AC 4100E0            and             reg[ 0h], ~1fh
 02AF 43001E            or              reg[ 0h], 1eh
 02B2 70EF          and   F, ~FLAG_XIO_MASK
 02B4           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 02B4 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 02B7 2600EF            and             [ACTIVE_CONFIG_STATUS+response1_ADDR_OFF], ~response1_BIT
 02BA 70EF          and   F, ~FLAG_XIO_MASK
 02BC 20                pop             x
 02BD           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 02BD 7F            ret
 02BE           
 02BE           ;---------------------------------------------------------------------------
 02BE           ; Load Configuration response2
 02BE           ;
 02BE           ;    Load configuration registers for response2.
 02BE           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 02BE           ;
 02BE           ;       INPUTS: None.
 02BE           ;      RETURNS: Nothing.
 02BE           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 02BE           ;               modified as may the Page Pointer registers!
 02BE           ;               In the large memory model currently only the page
 02BE           ;               pointer registers listed below are modified.  This does
 02BE           ;               not guarantee that in future implementations of this
 02BE           ;               function other page pointer registers will not be
 02BE           ;               modified.
 02BE           ;          
 02BE           ;               Page Pointer Registers Modified: 
 02BE           ;               CUR_PP
 02BE           ;
 02BE           _LoadConfig_response2:
 02BE            LoadConfig_response2:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 02BE 7110          or    F, FLAG_XIO_MASK
 02C0           ; writing Port_0_DriveMode_0 register
 02C0 4100E0            and             reg[ 0h], ~1fh
 02C3 430001            or              reg[ 0h],  1h
 02C6           ; writing Port_0_DriveMode_1 register
 02C6 4101E0            and             reg[ 1h], ~1fh
 02C9 43011E            or              reg[ 1h], 1eh
 02CC           ; writing Port_0_DriveMode_2 register
 02CC 70EF          and   F, ~FLAG_XIO_MASK
 02CE 4103E5            and             reg[ 3h], ~1ah
 02D1 43031A            or              reg[ 3h], 1ah
 02D4           ; writing Port_0_GlobalSelect register
 02D4 4102E5            and             reg[ 2h], ~1ah
 02D7           ; writing Row_0_LogicSelect_0 register
 02D7 41B3F0            and             reg[b3h], ~ fh
 02DA 43B303            or              reg[b3h],  3h
 02DD           ; writing Row_0_LogicSelect_1 register
 02DD 41B4F0            and             reg[b4h], ~ fh
 02E0 43B403            or              reg[b4h],  3h
 02E3           ; writing Row_0_OutputDrive_0 register
 02E3 41B5EC            and             reg[b5h], ~13h
 02E6 43B501            or              reg[b5h],  1h
 02E9           ; writing Row_0_OutputDrive_1 register
 02E9 41B6EE            and             reg[b6h], ~11h
 02EC           
 02EC 10                push    x
 02ED 70EF          and   F, ~FLAG_XIO_MASK
 02EF 5000          mov     a, 0                    ; Specify bank 0
 02F1 67            asr     a                       ; Store in carry flag
 02F2                                               ; Load bank 0 table:
 02F2 5000          mov     A, >LoadConfigTBL_response2_Bank0
 02F4 5700          mov     X, <LoadConfigTBL_response2_Bank0
 02F6 7C057C        lcall   LoadConfig              ; Load the bank 0 values
 02F9           
 02F9 5001          mov     a, 1                    ; Specify bank 1
 02FB 67            asr     a                       ; Store in carry flag
 02FC                                               ; Load bank 1 table:
 02FC 5000          mov     A, >LoadConfigTBL_response2_Bank1
 02FE 5700          mov     X, <LoadConfigTBL_response2_Bank1
 0300 7C057C        lcall   LoadConfig              ; Load the bank 1 values
 0303           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0303 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 0306 2E0020            or              [ACTIVE_CONFIG_STATUS+response2_ADDR_OFF], response2_BIT
 0309 70EF          and   F, ~FLAG_XIO_MASK
 030B 20                pop             x
 030C           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 030C 7F            ret
 030D           
 030D           ;---------------------------------------------------------------------------
 030D           ; Unload Configuration response2
 030D           ;
 030D           ;    Reset configuration registers for response2
 030D           ;    to their values as initially configured.
 030D           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 030D           ;
 030D           ;       INPUTS: None.
 030D           ;      RETURNS: Nothing.
 030D           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 030D           ;               modified as may the Page Pointer registers!
 030D           ;               In the large memory model currently only the page
 030D           ;               pointer registers listed below are modified.  This does
 030D           ;               not guarantee that in future implementations of this
 030D           ;               function other page pointer registers will not be
 030D           ;               modified.
 030D           ;          
 030D           ;               Page Pointer Registers Modified: 
 030D           ;               CUR_PP
 030D           ;
 030D           _UnloadConfig_response2:
 030D            UnloadConfig_response2:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 030D 10                push    x
 030E 70EF          and   F, ~FLAG_XIO_MASK
 0310 5000          mov     a, 0                    ; Specify bank 0
 0312 67            asr     a                       ; Store in carry flag
 0313                                               ; Bank 0 table address:
 0313 5000          mov     A, >UnloadConfigTBL_response2_Bank0
 0315 5700          mov     X, <UnloadConfigTBL_response2_Bank0
 0317 7C057C        lcall   LoadConfig              ; Unload the bank 0 values
 031A           
 031A 5001          mov     a, 1                    ; Specify bank 1
 031C 67            asr     a                       ; Store in carry flag
 031D                                               ; Bank 1 table address:
 031D 5000          mov     A, >UnloadConfigTBL_response2_Bank1
 031F 5700          mov     X, <UnloadConfigTBL_response2_Bank1
 0321 7C057C        lcall   LoadConfig              ; Unload the bank 1 values
 0324           
 0324 70EF          and   F, ~FLAG_XIO_MASK
 0326           ; writing Row_0_LogicSelect_0 register
 0326 41B3F0            and             reg[b3h], ~ fh
 0329 43B305            or              reg[b3h],  5h
 032C           ; writing Row_0_LogicSelect_1 register
 032C 41B4F0            and             reg[b4h], ~ fh
 032F 43B405            or              reg[b4h],  5h
 0332           ; writing Row_0_OutputDrive_0 register
 0332 41B5EC            and             reg[b5h], ~13h
 0335 43B512            or              reg[b5h], 12h
 0338           ; writing Row_0_OutputDrive_1 register
 0338 41B6EE            and             reg[b6h], ~11h
 033B 43B611            or              reg[b6h], 11h
 033E           ; writing Port_0_GlobalSelect register
 033E 4102E5            and             reg[ 2h], ~1ah
 0341 43021A            or              reg[ 2h], 1ah
 0344           ; writing Port_0_DriveMode_2 register
 0344 4103E5            and             reg[ 3h], ~1ah
 0347           ; writing Port_0_DriveMode_1 register
 0347 7110          or    F, FLAG_XIO_MASK
 0349 4101E0            and             reg[ 1h], ~1fh
 034C 430101            or              reg[ 1h],  1h
 034F           ; writing Port_0_DriveMode_0 register
 034F 4100E0            and             reg[ 0h], ~1fh
 0352 43001E            or              reg[ 0h], 1eh
 0355 70EF          and   F, ~FLAG_XIO_MASK
 0357           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0357 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 035A 2600DF            and             [ACTIVE_CONFIG_STATUS+response2_ADDR_OFF], ~response2_BIT
 035D 70EF          and   F, ~FLAG_XIO_MASK
 035F 20                pop             x
 0360           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0360 7F            ret
 0361           
 0361           ;---------------------------------------------------------------------------
 0361           ; Load Configuration response3
 0361           ;
 0361           ;    Load configuration registers for response3.
 0361           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0361           ;
 0361           ;       INPUTS: None.
 0361           ;      RETURNS: Nothing.
 0361           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0361           ;               modified as may the Page Pointer registers!
 0361           ;               In the large memory model currently only the page
 0361           ;               pointer registers listed below are modified.  This does
 0361           ;               not guarantee that in future implementations of this
 0361           ;               function other page pointer registers will not be
 0361           ;               modified.
 0361           ;          
 0361           ;               Page Pointer Registers Modified: 
 0361           ;               CUR_PP
 0361           ;
 0361           _LoadConfig_response3:
 0361            LoadConfig_response3:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0361 7110          or    F, FLAG_XIO_MASK
 0363           ; writing Port_0_DriveMode_0 register
 0363 4100E0            and             reg[ 0h], ~1fh
 0366 430001            or              reg[ 0h],  1h
 0369           ; writing Port_0_DriveMode_1 register
 0369 4101E0            and             reg[ 1h], ~1fh
 036C 43011E            or              reg[ 1h], 1eh
 036F           ; writing Port_0_DriveMode_2 register
 036F 70EF          and   F, ~FLAG_XIO_MASK
 0371 4103E9            and             reg[ 3h], ~16h
 0374 430316            or              reg[ 3h], 16h
 0377           ; writing Port_0_GlobalSelect register
 0377 4102E9            and             reg[ 2h], ~16h
 037A           ; writing Row_0_LogicSelect_0 register
 037A 41B3F0            and             reg[b3h], ~ fh
 037D 43B303            or              reg[b3h],  3h
 0380           ; writing Row_0_LogicSelect_1 register
 0380 41B4F0            and             reg[b4h], ~ fh
 0383 43B403            or              reg[b4h],  3h
 0386           ; writing Row_0_OutputDrive_0 register
 0386 41B5EC            and             reg[b5h], ~13h
 0389 43B501            or              reg[b5h],  1h
 038C           ; writing Row_0_OutputDrive_1 register
 038C 41B6EE            and             reg[b6h], ~11h
 038F           
 038F 10                push    x
 0390 70EF          and   F, ~FLAG_XIO_MASK
 0392 5000          mov     a, 0                    ; Specify bank 0
 0394 67            asr     a                       ; Store in carry flag
 0395                                               ; Load bank 0 table:
 0395 5000          mov     A, >LoadConfigTBL_response3_Bank0
 0397 5700          mov     X, <LoadConfigTBL_response3_Bank0
 0399 7C057C        lcall   LoadConfig              ; Load the bank 0 values
 039C           
 039C 5001          mov     a, 1                    ; Specify bank 1
 039E 67            asr     a                       ; Store in carry flag
 039F                                               ; Load bank 1 table:
 039F 5000          mov     A, >LoadConfigTBL_response3_Bank1
 03A1 5700          mov     X, <LoadConfigTBL_response3_Bank1
 03A3 7C057C        lcall   LoadConfig              ; Load the bank 1 values
 03A6           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 03A6 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 03A9 2E0040            or              [ACTIVE_CONFIG_STATUS+response3_ADDR_OFF], response3_BIT
 03AC 70EF          and   F, ~FLAG_XIO_MASK
 03AE 20                pop             x
 03AF           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 03AF 7F            ret
 03B0           
 03B0           ;---------------------------------------------------------------------------
 03B0           ; Unload Configuration response3
 03B0           ;
 03B0           ;    Reset configuration registers for response3
 03B0           ;    to their values as initially configured.
 03B0           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 03B0           ;
 03B0           ;       INPUTS: None.
 03B0           ;      RETURNS: Nothing.
 03B0           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 03B0           ;               modified as may the Page Pointer registers!
 03B0           ;               In the large memory model currently only the page
 03B0           ;               pointer registers listed below are modified.  This does
 03B0           ;               not guarantee that in future implementations of this
 03B0           ;               function other page pointer registers will not be
 03B0           ;               modified.
 03B0           ;          
 03B0           ;               Page Pointer Registers Modified: 
 03B0           ;               CUR_PP
 03B0           ;
 03B0           _UnloadConfig_response3:
 03B0            UnloadConfig_response3:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 03B0 10                push    x
 03B1 70EF          and   F, ~FLAG_XIO_MASK
 03B3 5000          mov     a, 0                    ; Specify bank 0
 03B5 67            asr     a                       ; Store in carry flag
 03B6                                               ; Bank 0 table address:
 03B6 5000          mov     A, >UnloadConfigTBL_response3_Bank0
 03B8 5700          mov     X, <UnloadConfigTBL_response3_Bank0
 03BA 7C057C        lcall   LoadConfig              ; Unload the bank 0 values
 03BD           
 03BD 5001          mov     a, 1                    ; Specify bank 1
 03BF 67            asr     a                       ; Store in carry flag
 03C0                                               ; Bank 1 table address:
 03C0 5000          mov     A, >UnloadConfigTBL_response3_Bank1
 03C2 5700          mov     X, <UnloadConfigTBL_response3_Bank1
 03C4 7C057C        lcall   LoadConfig              ; Unload the bank 1 values
 03C7           
 03C7 70EF          and   F, ~FLAG_XIO_MASK
 03C9           ; writing Row_0_LogicSelect_0 register
 03C9 41B3F0            and             reg[b3h], ~ fh
 03CC 43B305            or              reg[b3h],  5h
 03CF           ; writing Row_0_LogicSelect_1 register
 03CF 41B4F0            and             reg[b4h], ~ fh
 03D2 43B405            or              reg[b4h],  5h
 03D5           ; writing Row_0_OutputDrive_0 register
 03D5 41B5EC            and             reg[b5h], ~13h
 03D8 43B512            or              reg[b5h], 12h
 03DB           ; writing Row_0_OutputDrive_1 register
 03DB 41B6EE            and             reg[b6h], ~11h
 03DE 43B611            or              reg[b6h], 11h
 03E1           ; writing Port_0_GlobalSelect register
 03E1 4102E9            and             reg[ 2h], ~16h
 03E4 430216            or              reg[ 2h], 16h
 03E7           ; writing Port_0_DriveMode_2 register
 03E7 4103E9            and             reg[ 3h], ~16h
 03EA           ; writing Port_0_DriveMode_1 register
 03EA 7110          or    F, FLAG_XIO_MASK
 03EC 4101E0            and             reg[ 1h], ~1fh
 03EF 430101            or              reg[ 1h],  1h
 03F2           ; writing Port_0_DriveMode_0 register
 03F2 4100E0            and             reg[ 0h], ~1fh
 03F5 43001E            or              reg[ 0h], 1eh
 03F8 70EF          and   F, ~FLAG_XIO_MASK
 03FA           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 03FA 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 03FD 2600BF            and             [ACTIVE_CONFIG_STATUS+response3_ADDR_OFF], ~response3_BIT
 0400 70EF          and   F, ~FLAG_XIO_MASK
 0402 20                pop             x
 0403           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0403 7F            ret
 0404           
 0404           ;---------------------------------------------------------------------------
 0404           ; Load Configuration response4
 0404           ;
 0404           ;    Load configuration registers for response4.
 0404           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0404           ;
 0404           ;       INPUTS: None.
 0404           ;      RETURNS: Nothing.
 0404           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0404           ;               modified as may the Page Pointer registers!
 0404           ;               In the large memory model currently only the page
 0404           ;               pointer registers listed below are modified.  This does
 0404           ;               not guarantee that in future implementations of this
 0404           ;               function other page pointer registers will not be
 0404           ;               modified.
 0404           ;          
 0404           ;               Page Pointer Registers Modified: 
 0404           ;               CUR_PP
 0404           ;
 0404           _LoadConfig_response4:
 0404            LoadConfig_response4:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0404 7110          or    F, FLAG_XIO_MASK
 0406           ; writing Port_0_DriveMode_0 register
 0406 4100E0            and             reg[ 0h], ~1fh
 0409 430001            or              reg[ 0h],  1h
 040C           ; writing Port_0_DriveMode_1 register
 040C 4101E0            and             reg[ 1h], ~1fh
 040F 43011E            or              reg[ 1h], 1eh
 0412           ; writing Port_0_DriveMode_2 register
 0412 70EF          and   F, ~FLAG_XIO_MASK
 0414 4103F1            and             reg[ 3h], ~ eh
 0417 43030E            or              reg[ 3h],  eh
 041A           ; writing Port_0_GlobalSelect register
 041A 4102F1            and             reg[ 2h], ~ eh
 041D           ; writing Row_0_InputMux register
 041D 41B0FC            and             reg[b0h], ~ 3h
 0420 43B001            or              reg[b0h],  1h
 0423           ; writing Row_0_LogicSelect_0 register
 0423 41B3F0            and             reg[b3h], ~ fh
 0426 43B303            or              reg[b3h],  3h
 0429           ; writing Row_0_LogicSelect_1 register
 0429 41B4F0            and             reg[b4h], ~ fh
 042C 43B403            or              reg[b4h],  3h
 042F           ; writing Row_0_OutputDrive_0 register
 042F 41B5EC            and             reg[b5h], ~13h
 0432 43B501            or              reg[b5h],  1h
 0435           ; writing Row_0_OutputDrive_1 register
 0435 41B6EE            and             reg[b6h], ~11h
 0438           
 0438 10                push    x
 0439 70EF          and   F, ~FLAG_XIO_MASK
 043B 5000          mov     a, 0                    ; Specify bank 0
 043D 67            asr     a                       ; Store in carry flag
 043E                                               ; Load bank 0 table:
 043E 5000          mov     A, >LoadConfigTBL_response4_Bank0
 0440 5700          mov     X, <LoadConfigTBL_response4_Bank0
 0442 7C057C        lcall   LoadConfig              ; Load the bank 0 values
 0445           
 0445 5001          mov     a, 1                    ; Specify bank 1
 0447 67            asr     a                       ; Store in carry flag
 0448                                               ; Load bank 1 table:
 0448 5000          mov     A, >LoadConfigTBL_response4_Bank1
 044A 5700          mov     X, <LoadConfigTBL_response4_Bank1
 044C 7C057C        lcall   LoadConfig              ; Load the bank 1 values
 044F           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 044F 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 0452 2E0080            or              [ACTIVE_CONFIG_STATUS+response4_ADDR_OFF], response4_BIT
 0455 70EF          and   F, ~FLAG_XIO_MASK
 0457 20                pop             x
 0458           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0458 7F            ret
 0459           
 0459           ;---------------------------------------------------------------------------
 0459           ; Unload Configuration response4
 0459           ;
 0459           ;    Reset configuration registers for response4
 0459           ;    to their values as initially configured.
 0459           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0459           ;
 0459           ;       INPUTS: None.
 0459           ;      RETURNS: Nothing.
 0459           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0459           ;               modified as may the Page Pointer registers!
 0459           ;               In the large memory model currently only the page
 0459           ;               pointer registers listed below are modified.  This does
 0459           ;               not guarantee that in future implementations of this
 0459           ;               function other page pointer registers will not be
 0459           ;               modified.
 0459           ;          
 0459           ;               Page Pointer Registers Modified: 
 0459           ;               CUR_PP
 0459           ;
 0459           _UnloadConfig_response4:
 0459            UnloadConfig_response4:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0459 10                push    x
 045A 70EF          and   F, ~FLAG_XIO_MASK
 045C 5000          mov     a, 0                    ; Specify bank 0
 045E 67            asr     a                       ; Store in carry flag
 045F                                               ; Bank 0 table address:
 045F 5000          mov     A, >UnloadConfigTBL_response4_Bank0
 0461 5700          mov     X, <UnloadConfigTBL_response4_Bank0
 0463 7C057C        lcall   LoadConfig              ; Unload the bank 0 values
 0466           
 0466 5001          mov     a, 1                    ; Specify bank 1
 0468 67            asr     a                       ; Store in carry flag
 0469                                               ; Bank 1 table address:
 0469 5000          mov     A, >UnloadConfigTBL_response4_Bank1
 046B 5700          mov     X, <UnloadConfigTBL_response4_Bank1
 046D 7C057C        lcall   LoadConfig              ; Unload the bank 1 values
 0470           
 0470 70EF          and   F, ~FLAG_XIO_MASK
 0472           ; writing Row_0_InputMux register
 0472 41B0FC            and             reg[b0h], ~ 3h
 0475           ; writing Row_0_LogicSelect_0 register
 0475 41B3F0            and             reg[b3h], ~ fh
 0478 43B305            or              reg[b3h],  5h
 047B           ; writing Row_0_LogicSelect_1 register
 047B 41B4F0            and             reg[b4h], ~ fh
 047E 43B405            or              reg[b4h],  5h
 0481           ; writing Row_0_OutputDrive_0 register
 0481 41B5EC            and             reg[b5h], ~13h
 0484 43B512            or              reg[b5h], 12h
 0487           ; writing Row_0_OutputDrive_1 register
 0487 41B6EE            and             reg[b6h], ~11h
 048A 43B611            or              reg[b6h], 11h
 048D           ; writing Port_0_GlobalSelect register
 048D 4102F1            and             reg[ 2h], ~ eh
 0490 43020E            or              reg[ 2h],  eh
 0493           ; writing Port_0_DriveMode_2 register
 0493 4103F1            and             reg[ 3h], ~ eh
 0496           ; writing Port_0_DriveMode_1 register
 0496 7110          or    F, FLAG_XIO_MASK
 0498 4101E0            and             reg[ 1h], ~1fh
 049B 430101            or              reg[ 1h],  1h
 049E           ; writing Port_0_DriveMode_0 register
 049E 4100E0            and             reg[ 0h], ~1fh
 04A1 43001E            or              reg[ 0h], 1eh
 04A4 70EF          and   F, ~FLAG_XIO_MASK
 04A6           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 04A6 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 04A9 26007F            and             [ACTIVE_CONFIG_STATUS+response4_ADDR_OFF], ~response4_BIT
 04AC 70EF          and   F, ~FLAG_XIO_MASK
 04AE 20                pop             x
 04AF           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 04AF 7F            ret
 04B0           
 04B0           ;---------------------------------------------------------------------------
 04B0           ; Load Configuration servo_transmit
 04B0           ;
 04B0           ;    Load configuration registers for servo_transmit.
 04B0           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 04B0           ;
 04B0           ;       INPUTS: None.
 04B0           ;      RETURNS: Nothing.
 04B0           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 04B0           ;               modified as may the Page Pointer registers!
 04B0           ;               In the large memory model currently only the page
 04B0           ;               pointer registers listed below are modified.  This does
 04B0           ;               not guarantee that in future implementations of this
 04B0           ;               function other page pointer registers will not be
 04B0           ;               modified.
 04B0           ;          
 04B0           ;               Page Pointer Registers Modified: 
 04B0           ;               CUR_PP
 04B0           ;
 04B0           _LoadConfig_servo_transmit:
 04B0            LoadConfig_servo_transmit:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 04B0 7110          or    F, FLAG_XIO_MASK
 04B2           ; writing Port_0_DriveMode_0 register
 04B2 4100E0            and             reg[ 0h], ~1fh
 04B5 430001            or              reg[ 0h],  1h
 04B8           ; writing Port_0_DriveMode_1 register
 04B8 4101E0            and             reg[ 1h], ~1fh
 04BB 43011E            or              reg[ 1h], 1eh
 04BE           ; writing Port_0_DriveMode_2 register
 04BE 70EF          and   F, ~FLAG_XIO_MASK
 04C0 4103E1            and             reg[ 3h], ~1eh
 04C3 43031E            or              reg[ 3h], 1eh
 04C6           ; writing Port_0_GlobalSelect register
 04C6 4102E1            and             reg[ 2h], ~1eh
 04C9           ; writing Row_0_LogicSelect_0 register
 04C9 41B3F0            and             reg[b3h], ~ fh
 04CC 43B303            or              reg[b3h],  3h
 04CF           ; writing Row_0_LogicSelect_1 register
 04CF 41B4F0            and             reg[b4h], ~ fh
 04D2 43B403            or              reg[b4h],  3h
 04D5           ; writing Row_0_OutputDrive_0 register
 04D5 41B5EC            and             reg[b5h], ~13h
 04D8 43B501            or              reg[b5h],  1h
 04DB           ; writing Row_0_OutputDrive_1 register
 04DB 41B6EE            and             reg[b6h], ~11h
 04DE           
 04DE 10                push    x
 04DF 70EF          and   F, ~FLAG_XIO_MASK
 04E1 5000          mov     a, 0                    ; Specify bank 0
 04E3 67            asr     a                       ; Store in carry flag
 04E4                                               ; Load bank 0 table:
 04E4 5000          mov     A, >LoadConfigTBL_servo_transmit_Bank0
 04E6 5700          mov     X, <LoadConfigTBL_servo_transmit_Bank0
 04E8 7C057C        lcall   LoadConfig              ; Load the bank 0 values
 04EB           
 04EB 5001          mov     a, 1                    ; Specify bank 1
 04ED 67            asr     a                       ; Store in carry flag
 04EE                                               ; Load bank 1 table:
 04EE 5000          mov     A, >LoadConfigTBL_servo_transmit_Bank1
 04F0 5700          mov     X, <LoadConfigTBL_servo_transmit_Bank1
 04F2 7C057C        lcall   LoadConfig              ; Load the bank 1 values
 04F5           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 04F5 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
                ; set config active bit
 04F8 2E0101            or              [ACTIVE_CONFIG_STATUS+servo_transmit_ADDR_OFF], servo_transmit_BIT
 04FB 70EF          and   F, ~FLAG_XIO_MASK
 04FD 20                pop             x
 04FE           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 04FE 7F            ret
 04FF           
 04FF           ;---------------------------------------------------------------------------
 04FF           ; Unload Configuration servo_transmit
 04FF           ;
 04FF           ;    Reset configuration registers for servo_transmit
 04FF           ;    to their values as initially configured.
 04FF           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 04FF           ;
 04FF           ;       INPUTS: None.
 04FF           ;      RETURNS: Nothing.
 04FF           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 04FF           ;               modified as may the Page Pointer registers!
 04FF           ;               In the large memory model currently only the page
 04FF           ;               pointer registers listed below are modified.  This does
 04FF           ;               not guarantee that in future implementations of this
 04FF           ;               function other page pointer registers will not be
 04FF           ;               modified.
 04FF           ;          
 04FF           ;               Page Pointer Registers Modified: 
 04FF           ;               CUR_PP
 04FF           ;
 04FF           _UnloadConfig_servo_transmit:
 04FF            UnloadConfig_servo_transmit:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 04FF 10                push    x
 0500 70EF          and   F, ~FLAG_XIO_MASK
 0502 5000          mov     a, 0                    ; Specify bank 0
 0504 67            asr     a                       ; Store in carry flag
 0505                                               ; Bank 0 table address:
 0505 5000          mov     A, >UnloadConfigTBL_servo_transmit_Bank0
 0507 5700          mov     X, <UnloadConfigTBL_servo_transmit_Bank0
 0509 7C057C        lcall   LoadConfig              ; Unload the bank 0 values
 050C           
 050C 5001          mov     a, 1                    ; Specify bank 1
 050E 67            asr     a                       ; Store in carry flag
 050F                                               ; Bank 1 table address:
 050F 5000          mov     A, >UnloadConfigTBL_servo_transmit_Bank1
 0511 5700          mov     X, <UnloadConfigTBL_servo_transmit_Bank1
 0513 7C057C        lcall   LoadConfig              ; Unload the bank 1 values
 0516           
 0516 70EF          and   F, ~FLAG_XIO_MASK
 0518           ; writing Row_0_LogicSelect_0 register
 0518 41B3F0            and             reg[b3h], ~ fh
 051B 43B305            or              reg[b3h],  5h
 051E           ; writing Row_0_LogicSelect_1 register
 051E 41B4F0            and             reg[b4h], ~ fh
 0521 43B405            or              reg[b4h],  5h
 0524           ; writing Row_0_OutputDrive_0 register
 0524 41B5EC            and             reg[b5h], ~13h
 0527 43B512            or              reg[b5h], 12h
 052A           ; writing Row_0_OutputDrive_1 register
 052A 41B6EE            and             reg[b6h], ~11h
 052D 43B611            or              reg[b6h], 11h
 0530           ; writing Port_0_GlobalSelect register
 0530 4102E1            and             reg[ 2h], ~1eh
 0533 43021E            or              reg[ 2h], 1eh
 0536           ; writing Port_0_DriveMode_2 register
 0536 4103E1            and             reg[ 3h], ~1eh
 0539           ; writing Port_0_DriveMode_1 register
 0539 7110          or    F, FLAG_XIO_MASK
 053B 4101E0            and             reg[ 1h], ~1fh
 053E 430101            or              reg[ 1h],  1h
 0541           ; writing Port_0_DriveMode_0 register
 0541 4100E0            and             reg[ 0h], ~1fh
 0544 43001E            or              reg[ 0h], 1eh
 0547 70EF          and   F, ~FLAG_XIO_MASK
 0549           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0549 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 054C 2601FE            and             [ACTIVE_CONFIG_STATUS+servo_transmit_ADDR_OFF], ~servo_transmit_BIT
 054F 70EF          and   F, ~FLAG_XIO_MASK
 0551 20                pop             x
 0552           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0552 7F            ret
 0553           
 0553           ;---------------------------------------------------------------------------
 0553           ; Unload Configuration Total
 0553           ;
 0553           ;    Reset configuration registers for Total
 0553           ;    to their values as initially configured.
 0553           ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
 0553           ;
 0553           ;       INPUTS: None.
 0553           ;      RETURNS: Nothing.
 0553           ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
 0553           ;               modified as may the Page Pointer registers!
 0553           ;               In the large memory model currently only the page
 0553           ;               pointer registers listed below are modified.  This does
 0553           ;               not guarantee that in future implementations of this
 0553           ;               function other page pointer registers will not be
 0553           ;               modified.
 0553           ;          
 0553           ;               Page Pointer Registers Modified: 
 0553           ;               CUR_PP
 0553           ;
 0553           _UnloadConfig_Total:
 0553            UnloadConfig_Total:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                
 0553 10                push    x
 0554 70EF          and   F, ~FLAG_XIO_MASK
 0556 5000          mov     a, 0                    ; Specify bank 0
 0558 67            asr     a                       ; Store in carry flag
 0559                                               ; Bank 0 table address:
 0559 5000          mov     A, >UnloadConfigTBL_Total_Bank0
 055B 5700          mov     X, <UnloadConfigTBL_Total_Bank0
 055D 7C057C        lcall   LoadConfig              ; Unload the bank 0 values
 0560           
 0560 5001          mov     a, 1                    ; Specify bank 1
 0562 67            asr     a                       ; Store in carry flag
 0563                                               ; Bank 1 table address:
 0563 5000          mov     A, >UnloadConfigTBL_Total_Bank1
 0565 5700          mov     X, <UnloadConfigTBL_Total_Bank1
 0567 7C057C        lcall   LoadConfig              ; Unload the bank 1 values
 056A           
 056A 70EF          and   F, ~FLAG_XIO_MASK
 056C           ; clear config active bit
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 056C 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 056F 550000            mov             [ACTIVE_CONFIG_STATUS+0], 0
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0572 62D000          mov reg[CUR_PP], >ACTIVE_CONFIG_STATUS
                   ENDIF
 0575 550100            mov             [ACTIVE_CONFIG_STATUS+1], 0
 0578 70EF          and   F, ~FLAG_XIO_MASK
 057A 20                pop             x
 057B           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 057B 7F            ret
 057C           
 057C           
 057C           
 057C           
 057C           ;---------------------------------------------------------------------------
 057C           ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
 057C           ;              pairs. Terminate on address=0xFF.
 057C           ;
 057C           ;  INPUTS:  [A,X] points to the table to be loaded
 057C           ;           Flag Register Carry bit encodes the Register Bank
 057C           ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
 057C           ;
 057C           ;  RETURNS: nothing.
 057C           ;
 057C           ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
 057C           ;                X-3 Temporary store for register address
 057C           ;                X-2 LSB of config table address
 057C           ;                X-1 MSB of config table address
 057C           ;
 057C           LoadConfig:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 057C 3802          add     SP, 2                   ; Set up local vars
 057E 10            push    X                       ; Save config table address on stack
 057F 08            push    A
 0580 4F            mov     X, SP
 0581 56FC00        mov     [X-4], 0                ; Set default Destination to Bank 0
 0584 D004          jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
 0586 56FC01        mov     [X-4], 1                ; No Carry: default to Bank 1
 0589           .BankSelectSaved:
 0589 18            pop     A
 058A 20            pop     X
 058B           
 058B           LoadConfigLp:
 058B 70EF          and   F, ~FLAG_XIO_MASK
 058D 62E300        mov   reg[RES_WDT], 00h
 0590 10            push    X                       ; Preserve the config table address
 0591 08            push    A
 0592 28            romx                            ; Load register address from table
 0593 39FF          cmp     A, END_CONFIG_TABLE     ; End of table?
 0595 A01F          jz      EndLoadConfig           ;   Yes, go wrap it up
 0597 4F            mov     X, SP                   ;
 0598 48FC01        tst     [X-4], 1                ; Loading IO Bank 1?
 059B A003          jz      .IOBankNowSet           ;    No, Bank 0 is fine
 059D 7110          or    F, FLAG_XIO_MASK
 059F           .IOBankNowSet:
 059F 54FD          mov     [X-3], A                ; Stash the register address
 05A1 18            pop     A                       ; Retrieve the table address
 05A2 20            pop     X
 05A3 75            inc     X                       ; Advance to the data byte
 05A4 0900          adc     A, 0
 05A6 10            push    X                       ; Save the config table address again
 05A7 08            push    A
 05A8 28            romx                            ; load config data from the table
 05A9 4F            mov     X, SP                   ; retrieve the register address
 05AA 59FD          mov     X, [X-3]
 05AC 6100          mov     reg[X], A               ; Configure the register
 05AE 18            pop     A                       ; retrieve the table address
 05AF 20            pop     X
 05B0 75            inc     X                       ; advance to next table entry
 05B1 0900          adc     A, 0
 05B3 8FD7          jmp     LoadConfigLp            ; loop to configure another register
 05B5           EndLoadConfig:
 05B5 38FC          add     SP, -4
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 05B7 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 05B9 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 05BB 7F            ret
 05BC           
                AREA InterruptRAM(ram, rel)
                
 0000           NO_SHADOW:
 0000           _NO_SHADOW:
 0000           ; active configuration status byte
 0000           ACTIVE_CONFIG_STATUS:   BLK     2
 0002           
                AREA text(rom, rel)
