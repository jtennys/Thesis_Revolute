//*****************************************************************************
//*****************************************************************************
//  FILENAME: RX8_11.h
//   Version: 3.3, Updated on 2009/7/10 at 10:46:15
//  Generated by PSoC Designer 5.0.985.0
//
//  DESCRIPTION:  RX8 User Module C Language interface file for the
//                22/24/25/26/27xxx PSoC family of devices.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************


// include the global header file
#include <m8c.h>

#define RX8_11_RXBUF_ENABLE 1

//-------------------------------------------------
// Prototypes of the RX8_11 API.
//-------------------------------------------------

#if ( RX8_11_RXBUF_ENABLE )
extern char RX8_11_aRxBuffer[];
extern BYTE RX8_11_bRxCnt;
extern BYTE RX8_11_fStatus;
#endif

// Create pragmas to support proper argument and return value passing
#pragma fastcall16  RX8_11_EnableInt
#pragma fastcall16  RX8_11_DisableInt
#pragma fastcall16  RX8_11_Start
#pragma fastcall16  RX8_11_Stop
#pragma fastcall16  RX8_11_bReadRxData
#pragma fastcall16  RX8_11_bReadRxStatus

#pragma fastcall16  RX8_11_cGetChar
#pragma fastcall16  RX8_11_cReadChar
#pragma fastcall16  RX8_11_iReadChar

#if ( RX8_11_RXBUF_ENABLE )
#pragma fastcall16  RX8_11_CmdReset
#pragma fastcall16  RX8_11_bCmdCheck
#pragma fastcall16  RX8_11_bErrCheck
#pragma fastcall16  RX8_11_bCmdLength
#pragma fastcall16  RX8_11_szGetParam
#pragma fastcall16  RX8_11_szGetRestOfParams
#endif

//-------------------------------------------------
// Prototypes of the RX8_11 API.
//-------------------------------------------------
extern void  RX8_11_EnableInt(void);
extern void  RX8_11_DisableInt(void);
extern void  RX8_11_Start(BYTE bParity);
extern void  RX8_11_Stop(void);
extern BYTE  RX8_11_bReadRxData(void);
extern BYTE  RX8_11_bReadRxStatus(void);

// High level RX functions
extern CHAR         RX8_11_cGetChar(void);
extern CHAR         RX8_11_cReadChar(void);
extern INT          RX8_11_iReadChar(void);

#if ( RX8_11_RXBUF_ENABLE )
extern void   RX8_11_CmdReset(void);
extern BYTE   RX8_11_bCmdCheck(void);
extern BYTE   RX8_11_bErrCheck(void);
extern BYTE   RX8_11_bCmdLength(void);
extern char * RX8_11_szGetParam(void);
extern char * RX8_11_szGetRestOfParams(void);
#endif

// Old function call names, do not use.
// These names will be removed in a future release.
#pragma fastcall16 bRX8_11_ReadRxData
#pragma fastcall16 bRX8_11_ReadRxStatus
extern BYTE bRX8_11_ReadRxData(void);
extern BYTE bRX8_11_ReadRxStatus(void);

//-------------------------------------------------
// Constants for RX8_11 API's.
//-------------------------------------------------

//------------------------------------
// Receiver Interrupt masks
//------------------------------------
#define RX8_11_INT_REG_ADDR                    ( 0x0e1 )
#define RX8_11_bINT_MASK                       ( 0x04 )

//------------------------------------
// Receiver Parity masks
//------------------------------------
#define  RX8_11_PARITY_NONE         0x00
#define  RX8_11_PARITY_EVEN         0x02
#define  RX8_11_PARITY_ODD          0x06

//------------------------------------
//  Receiver Status Register masks
//------------------------------------
#define  RX8_11_RX_ACTIVE           0x10
#define  RX8_11_RX_COMPLETE         0x08
#define  RX8_11_RX_PARITY_ERROR     0x80
#define  RX8_11_RX_OVERRUN_ERROR    0x40
#define  RX8_11_RX_FRAMING_ERROR    0x20
#define  RX8_11_RX_NO_ERROR         0xE0

#define  RX8_11_RX_NO_DATA         0x01

#define  RX8_11_RX_BUF_ERROR              0xF0  // Mask for any Rx that may occur.
#define  RX8_11_RX_BUF_OVERRUN            0x10  // This indicates the software buffer has
                                                           // been over run.
#define  RX8_11_RX_BUF_CMDTERM            0x01  // Command terminator has been received.

// Old defines, will be removed in future release
#define  RX8_PARITY_NONE         0x00
#define  RX8_PARITY_EVEN         0x02
#define  RX8_PARITY_ODD          0x06
#define  RX8_RX_ACTIVE           0x10
#define  RX8_RX_COMPLETE         0x08
#define  RX8_RX_PARITY_ERROR     0x80
#define  RX8_RX_OVERRUN_ERROR    0x40
#define  RX8_RX_FRAMING_ERROR    0x20
#define  RX8_RX_NO_ERROR         0xE0

//-------------------------------------------------
// Register Addresses for RX8_11
//-------------------------------------------------
#pragma ioport  RX8_11_CONTROL_REG: 0x02b                  // Control register
BYTE            RX8_11_CONTROL_REG;
#pragma ioport  RX8_11_RX_SHIFT_REG:    0x028              // RX Shift Register register
BYTE            RX8_11_RX_SHIFT_REG;
#pragma ioport  RX8_11_RX_BUFFER_REG:   0x02a              // RX Buffer Register
BYTE            RX8_11_RX_BUFFER_REG;
#pragma ioport  RX8_11_FUNC_REG:    0x128                  // Function register
BYTE            RX8_11_FUNC_REG;
#pragma ioport  RX8_11_INPUT_REG:   0x129                  // Input register
BYTE            RX8_11_INPUT_REG;
#pragma ioport  RX8_11_OUTPUT_REG:  0x12a                  // Output register
BYTE            RX8_11_OUTPUT_REG;

// end of file RX8_11.h

