; Generated by PSoC Designer 5.0.985.0
;
INCLUDE "PSoCDynamic.inc"
;==========================================================================
;  PSoCConfig.asm
;  @PSOC_VERSION
;
;  Version: 0.85
;  Revised: June 22, 2004
;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
;
;  This file is generated by the Device Editor on Application Generation.
;  It contains code which loads the configuration data table generated in
;  the file PSoCConfigTBL.asm
;
;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
;  Edits to this file will not be preserved.
;==========================================================================
;
include "m8c.inc"
include "memory.inc"
include "GlobalParams.inc"

export LoadConfigInit
export _LoadConfigInit
export LoadConfig_waiting
export _LoadConfig_waiting
export UnloadConfig_waiting
export _UnloadConfig_waiting
export ReloadConfig_waiting
export _ReloadConfig_waiting
export LoadConfig_hello
export _LoadConfig_hello
export UnloadConfig_hello
export _UnloadConfig_hello
export LoadConfig_initial
export _LoadConfig_initial
export UnloadConfig_initial
export _UnloadConfig_initial
export LoadConfig_my_response
export _LoadConfig_my_response
export UnloadConfig_my_response
export _UnloadConfig_my_response
export LoadConfig_response1
export _LoadConfig_response1
export UnloadConfig_response1
export _UnloadConfig_response1
export LoadConfig_response2
export _LoadConfig_response2
export UnloadConfig_response2
export _UnloadConfig_response2
export LoadConfig_response3
export _LoadConfig_response3
export UnloadConfig_response3
export _UnloadConfig_response3
export LoadConfig_response4
export _LoadConfig_response4
export UnloadConfig_response4
export _UnloadConfig_response4
export LoadConfig_servo_transmit
export _LoadConfig_servo_transmit
export UnloadConfig_servo_transmit
export _UnloadConfig_servo_transmit
export UnloadConfig_Total
export _UnloadConfig_Total
export ACTIVE_CONFIG_STATUS

export NO_SHADOW
export _NO_SHADOW

FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
END_CONFIG_TABLE:   equ ffh         ;end of config table indicator

AREA psoc_config(rom, rel)

;---------------------------------------------------------------------------
; LoadConfigInit - Establish the start-up configuration (except for a few
;                  parameters handled by boot code, like CPU speed). This
;                  function can be called from user code, but typically it
;                  is only called from boot.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfigInit:
 LoadConfigInit:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	mov		[ACTIVE_CONFIG_STATUS], 0
	mov		[ACTIVE_CONFIG_STATUS+1], 0

	lcall	LoadConfig_waiting
	lcall	LoadConfigTBL_waiting_Ordered


    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration waiting
;
;    Load configuration registers for waiting.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_waiting:
 LoadConfig_waiting:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_waiting_Bank0
    mov     X, <LoadConfigTBL_waiting_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_waiting_Bank1
    mov     X, <LoadConfigTBL_waiting_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+waiting_ADDR_OFF], waiting_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Reload Configuration waiting
;
;    Reload configuration registers for waiting.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_ReloadConfig_waiting:
 ReloadConfig_waiting:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >ReloadConfigTBL_waiting_Bank0
    mov     X, <ReloadConfigTBL_waiting_Bank0
    lcall   LoadConfig              ; Reload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >ReloadConfigTBL_waiting_Bank1
    mov     X, <ReloadConfigTBL_waiting_Bank1
    lcall   LoadConfig              ; Reload the bank 1 values

; set config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	or		[ACTIVE_CONFIG_STATUS+waiting_ADDR_OFF], waiting_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration waiting
;
;    Reset configuration registers for waiting
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_waiting:
 UnloadConfig_waiting:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_waiting_Bank0
    mov     X, <UnloadConfigTBL_waiting_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_waiting_Bank1
    mov     X, <UnloadConfigTBL_waiting_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank0
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+waiting_ADDR_OFF], ~waiting_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration hello
;
;    Load configuration registers for hello.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_hello:
 LoadConfig_hello:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1
; writing Port_0_DriveMode_0 register
	and		reg[ 0h], ~1eh
; writing Port_0_DriveMode_1 register
	and		reg[ 1h], ~1eh
	or		reg[ 1h], 1eh
; writing Port_0_DriveMode_2 register
	M8C_SetBank0
	and		reg[ 3h], ~ 1h
	or		reg[ 3h],  1h
; writing Port_0_GlobalSelect register
	and		reg[ 2h], ~ 1h
; writing Row_0_LogicSelect_0 register
	and		reg[b3h], ~ fh
	or		reg[b3h],  3h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  3h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h
; writing Row_1_InputMux register
	and		reg[b8h], ~c0h

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_hello_Bank0
    mov     X, <LoadConfigTBL_hello_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_hello_Bank1
    mov     X, <LoadConfigTBL_hello_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+hello_ADDR_OFF], hello_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration hello
;
;    Reset configuration registers for hello
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_hello:
 UnloadConfig_hello:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_hello_Bank0
    mov     X, <UnloadConfigTBL_hello_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_hello_Bank1
    mov     X, <UnloadConfigTBL_hello_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank0
; writing Row_0_LogicSelect_0 register
	and		reg[b3h], ~ fh
	or		reg[b3h],  5h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  5h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
	or		reg[b5h], 12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h
	or		reg[b6h], 11h
; writing Row_1_InputMux register
	and		reg[b8h], ~c0h
	or		reg[b8h], 40h
; writing Port_0_GlobalSelect register
	and		reg[ 2h], ~ 1h
	or		reg[ 2h],  1h
; writing Port_0_DriveMode_2 register
	and		reg[ 3h], ~ 1h
; writing Port_0_DriveMode_1 register
	M8C_SetBank1
	and		reg[ 1h], ~1eh
; writing Port_0_DriveMode_0 register
	and		reg[ 0h], ~1eh
	or		reg[ 0h], 1eh
	M8C_SetBank0
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+hello_ADDR_OFF], ~hello_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration initial
;
;    Load configuration registers for initial.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_initial:
 LoadConfig_initial:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1
; writing Port_0_DriveMode_0 register
	and		reg[ 0h], ~1eh
; writing Port_0_DriveMode_1 register
	and		reg[ 1h], ~1eh
	or		reg[ 1h], 1eh
; writing Port_0_DriveMode_2 register
	M8C_SetBank0
	and		reg[ 3h], ~1eh
	or		reg[ 3h], 1eh
; writing Port_0_GlobalSelect register
	and		reg[ 2h], ~1eh
; writing Row_0_LogicSelect_0 register
	and		reg[b3h], ~ fh
	or		reg[b3h],  3h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  3h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_initial_Bank0
    mov     X, <LoadConfigTBL_initial_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_initial_Bank1
    mov     X, <LoadConfigTBL_initial_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+initial_ADDR_OFF], initial_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration initial
;
;    Reset configuration registers for initial
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_initial:
 UnloadConfig_initial:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_initial_Bank0
    mov     X, <UnloadConfigTBL_initial_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_initial_Bank1
    mov     X, <UnloadConfigTBL_initial_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank0
; writing Row_0_LogicSelect_0 register
	and		reg[b3h], ~ fh
	or		reg[b3h],  5h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  5h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
	or		reg[b5h], 12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h
	or		reg[b6h], 11h
; writing Port_0_GlobalSelect register
	and		reg[ 2h], ~1eh
	or		reg[ 2h], 1eh
; writing Port_0_DriveMode_2 register
	and		reg[ 3h], ~1eh
; writing Port_0_DriveMode_1 register
	M8C_SetBank1
	and		reg[ 1h], ~1eh
; writing Port_0_DriveMode_0 register
	and		reg[ 0h], ~1eh
	or		reg[ 0h], 1eh
	M8C_SetBank0
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+initial_ADDR_OFF], ~initial_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration my_response
;
;    Load configuration registers for my_response.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_my_response:
 LoadConfig_my_response:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1
; writing Port_0_DriveMode_0 register
	and		reg[ 0h], ~ 1h
	or		reg[ 0h],  1h
; writing Port_0_DriveMode_1 register
	and		reg[ 1h], ~ 1h
; writing Row_0_OutputDrive_0 register
	M8C_SetBank0
	and		reg[b5h], ~ 1h
	or		reg[b5h],  1h

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_my_response_Bank0
    mov     X, <LoadConfigTBL_my_response_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_my_response_Bank1
    mov     X, <LoadConfigTBL_my_response_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+my_response_ADDR_OFF], my_response_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration my_response
;
;    Reset configuration registers for my_response
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_my_response:
 UnloadConfig_my_response:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_my_response_Bank0
    mov     X, <UnloadConfigTBL_my_response_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_my_response_Bank1
    mov     X, <UnloadConfigTBL_my_response_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank0
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~ 1h
; writing Port_0_DriveMode_1 register
	M8C_SetBank1
	and		reg[ 1h], ~ 1h
	or		reg[ 1h],  1h
; writing Port_0_DriveMode_0 register
	and		reg[ 0h], ~ 1h
	M8C_SetBank0
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+my_response_ADDR_OFF], ~my_response_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration response1
;
;    Load configuration registers for response1.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_response1:
 LoadConfig_response1:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1
; writing Row_0_LogicSelect_0 register
	M8C_SetBank0
	and		reg[b3h], ~ fh
	or		reg[b3h],  3h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  3h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_response1_Bank0
    mov     X, <LoadConfigTBL_response1_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_response1_Bank1
    mov     X, <LoadConfigTBL_response1_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+response1_ADDR_OFF], response1_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration response1
;
;    Reset configuration registers for response1
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_response1:
 UnloadConfig_response1:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_response1_Bank0
    mov     X, <UnloadConfigTBL_response1_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_response1_Bank1
    mov     X, <UnloadConfigTBL_response1_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank0
; writing Row_0_LogicSelect_0 register
	and		reg[b3h], ~ fh
	or		reg[b3h],  5h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  5h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
	or		reg[b5h], 12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h
	or		reg[b6h], 11h
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+response1_ADDR_OFF], ~response1_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration response2
;
;    Load configuration registers for response2.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_response2:
 LoadConfig_response2:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1
; writing Row_0_LogicSelect_0 register
	M8C_SetBank0
	and		reg[b3h], ~ fh
	or		reg[b3h],  3h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  3h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_response2_Bank0
    mov     X, <LoadConfigTBL_response2_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_response2_Bank1
    mov     X, <LoadConfigTBL_response2_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+response2_ADDR_OFF], response2_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration response2
;
;    Reset configuration registers for response2
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_response2:
 UnloadConfig_response2:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_response2_Bank0
    mov     X, <UnloadConfigTBL_response2_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_response2_Bank1
    mov     X, <UnloadConfigTBL_response2_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank0
; writing Row_0_LogicSelect_0 register
	and		reg[b3h], ~ fh
	or		reg[b3h],  5h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  5h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
	or		reg[b5h], 12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h
	or		reg[b6h], 11h
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+response2_ADDR_OFF], ~response2_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration response3
;
;    Load configuration registers for response3.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_response3:
 LoadConfig_response3:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1
; writing Row_0_LogicSelect_0 register
	M8C_SetBank0
	and		reg[b3h], ~ fh
	or		reg[b3h],  3h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  3h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_response3_Bank0
    mov     X, <LoadConfigTBL_response3_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_response3_Bank1
    mov     X, <LoadConfigTBL_response3_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+response3_ADDR_OFF], response3_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration response3
;
;    Reset configuration registers for response3
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_response3:
 UnloadConfig_response3:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_response3_Bank0
    mov     X, <UnloadConfigTBL_response3_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_response3_Bank1
    mov     X, <UnloadConfigTBL_response3_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank0
; writing Row_0_LogicSelect_0 register
	and		reg[b3h], ~ fh
	or		reg[b3h],  5h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  5h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
	or		reg[b5h], 12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h
	or		reg[b6h], 11h
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+response3_ADDR_OFF], ~response3_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration response4
;
;    Load configuration registers for response4.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_response4:
 LoadConfig_response4:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1
; writing Row_0_LogicSelect_0 register
	M8C_SetBank0
	and		reg[b3h], ~ fh
	or		reg[b3h],  3h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  3h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_response4_Bank0
    mov     X, <LoadConfigTBL_response4_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_response4_Bank1
    mov     X, <LoadConfigTBL_response4_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+response4_ADDR_OFF], response4_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration response4
;
;    Reset configuration registers for response4
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_response4:
 UnloadConfig_response4:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_response4_Bank0
    mov     X, <UnloadConfigTBL_response4_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_response4_Bank1
    mov     X, <UnloadConfigTBL_response4_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank0
; writing Row_0_LogicSelect_0 register
	and		reg[b3h], ~ fh
	or		reg[b3h],  5h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  5h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
	or		reg[b5h], 12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h
	or		reg[b6h], 11h
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+response4_ADDR_OFF], ~response4_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Load Configuration servo_transmit
;
;    Load configuration registers for servo_transmit.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_LoadConfig_servo_transmit:
 LoadConfig_servo_transmit:
    RAM_PROLOGUE RAM_USE_CLASS_4
	M8C_SetBank1
; writing Row_0_LogicSelect_0 register
	M8C_SetBank0
	and		reg[b3h], ~ fh
	or		reg[b3h],  3h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  3h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Load bank 0 table:
    mov     A, >LoadConfigTBL_servo_transmit_Bank0
    mov     X, <LoadConfigTBL_servo_transmit_Bank0
    lcall   LoadConfig              ; Load the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Load bank 1 table:
    mov     A, >LoadConfigTBL_servo_transmit_Bank1
    mov     X, <LoadConfigTBL_servo_transmit_Bank1
    lcall   LoadConfig              ; Load the bank 1 values

	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
; set config active bit
	or		[ACTIVE_CONFIG_STATUS+servo_transmit_ADDR_OFF], servo_transmit_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration servo_transmit
;
;    Reset configuration registers for servo_transmit
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_servo_transmit:
 UnloadConfig_servo_transmit:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_servo_transmit_Bank0
    mov     X, <UnloadConfigTBL_servo_transmit_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_servo_transmit_Bank1
    mov     X, <UnloadConfigTBL_servo_transmit_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank0
; writing Row_0_LogicSelect_0 register
	and		reg[b3h], ~ fh
	or		reg[b3h],  5h
; writing Row_0_LogicSelect_1 register
	and		reg[b4h], ~ fh
	or		reg[b4h],  5h
; writing Row_0_OutputDrive_0 register
	and		reg[b5h], ~12h
	or		reg[b5h], 12h
; writing Row_0_OutputDrive_1 register
	and		reg[b6h], ~11h
	or		reg[b6h], 11h
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	and		[ACTIVE_CONFIG_STATUS+servo_transmit_ADDR_OFF], ~servo_transmit_BIT
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret

;---------------------------------------------------------------------------
; Unload Configuration Total
;
;    Reset configuration registers for Total
;    to their values as initially configured.
;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
;
;       INPUTS: None.
;      RETURNS: Nothing.
; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
;               modified as may the Page Pointer registers!
;               In the large memory model currently only the page
;               pointer registers listed below are modified.  This does
;               not guarantee that in future implementations of this
;               function other page pointer registers will not be
;               modified.
;          
;               Page Pointer Registers Modified: 
;               CUR_PP
;
_UnloadConfig_Total:
 UnloadConfig_Total:
    RAM_PROLOGUE RAM_USE_CLASS_4

	push	x
    M8C_SetBank0                    ; Force bank 0
    mov     a, 0                    ; Specify bank 0
    asr     a                       ; Store in carry flag
                                    ; Bank 0 table address:
    mov     A, >UnloadConfigTBL_Total_Bank0
    mov     X, <UnloadConfigTBL_Total_Bank0
    lcall   LoadConfig              ; Unload the bank 0 values

    mov     a, 1                    ; Specify bank 1
    asr     a                       ; Store in carry flag
                                    ; Bank 1 table address:
    mov     A, >UnloadConfigTBL_Total_Bank1
    mov     X, <UnloadConfigTBL_Total_Bank1
    lcall   LoadConfig              ; Unload the bank 1 values

	M8C_SetBank0
; clear config active bit
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	mov		[ACTIVE_CONFIG_STATUS+0], 0
	RAM_SETPAGE_CUR >ACTIVE_CONFIG_STATUS
	mov		[ACTIVE_CONFIG_STATUS+1], 0
    M8C_SetBank0                    ; Force return to bank 0
	pop		x

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret




;---------------------------------------------------------------------------
; LoadConfig - Set IO registers as specified in ROM table of (address,value)
;              pairs. Terminate on address=0xFF.
;
;  INPUTS:  [A,X] points to the table to be loaded
;           Flag Register Carry bit encodes the Register Bank
;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
;
;  RETURNS: nothing.
;
;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
;                X-3 Temporary store for register address
;                X-2 LSB of config table address
;                X-1 MSB of config table address
;
LoadConfig:
    RAM_PROLOGUE RAM_USE_CLASS_2
    add     SP, 2                   ; Set up local vars
    push    X                       ; Save config table address on stack
    push    A
    mov     X, SP
    mov     [X-4], 0                ; Set default Destination to Bank 0
    jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
    mov     [X-4], 1                ; No Carry: default to Bank 1
.BankSelectSaved:
    pop     A
    pop     X

LoadConfigLp:
    M8C_SetBank0                    ; Switch to bank 0
    M8C_ClearWDT                    ; Clear the watchdog for long inits
    push    X                       ; Preserve the config table address
    push    A
    romx                            ; Load register address from table
    cmp     A, END_CONFIG_TABLE     ; End of table?
    jz      EndLoadConfig           ;   Yes, go wrap it up
    mov     X, SP                   ;
    tst     [X-4], 1                ; Loading IO Bank 1?
    jz      .IOBankNowSet           ;    No, Bank 0 is fine
    M8C_SetBank1                    ;   Yes, switch to Bank 1
.IOBankNowSet:
    mov     [X-3], A                ; Stash the register address
    pop     A                       ; Retrieve the table address
    pop     X
    inc     X                       ; Advance to the data byte
    adc     A, 0
    push    X                       ; Save the config table address again
    push    A
    romx                            ; load config data from the table
    mov     X, SP                   ; retrieve the register address
    mov     X, [X-3]
    mov     reg[X], A               ; Configure the register
    pop     A                       ; retrieve the table address
    pop     X
    inc     X                       ; advance to next table entry
    adc     A, 0
    jmp     LoadConfigLp            ; loop to configure another register
EndLoadConfig:
    add     SP, -4
    RAM_EPILOGUE RAM_USE_CLASS_2
    ret

AREA InterruptRAM(ram, rel)

NO_SHADOW:
_NO_SHADOW:
; active configuration status byte
ACTIVE_CONFIG_STATUS:	BLK	2

AREA text(rom, rel)
