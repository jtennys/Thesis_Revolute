                ; Generated by PSoC Designer 5.0.985.0
                ;
                ;@Id: boot.tpl#884 @
                ;=============================================================================
                ;  FILENAME:   boot.asm
                ;  VERSION:    1.00
                ;  DATE:       05 March 2009
                ;
                ;  DESCRIPTION:
                ;  M8C Boot Code for CY8C28xxx microcontroller devices.
                ;
                ;  Copyright (C) Cypress Semiconductors 2009. All rights reserved.
                ;
                ; NOTES:
                ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                ; the project's root directory to create BOOT.ASM. Any changes made to
                ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                ; are not accidentally modified.
                ;
                ;=============================================================================
                
 0003           CPU_CLOCK:				equ	3h		;CPU clock value
 0007           CPU_CLOCK_MASK:			equ	7h		;CPU clock mask
 0003           CPU_CLOCK_JUST:			equ	3h		;CPU clock value justified
 0000           SELECT_32K:				equ	0h		;32K select value
 0080           SELECT_32K_MASK:		equ	80h		;32K select mask
 0000           SELECT_32K_JUST:		equ	0h		;32K select value justified
 0000           PLL_MODE:				equ	0h		;PLL mode value
 0040           PLL_MODE_MASK:			equ	40h		;PLL mode mask
 0000           PLL_MODE_JUST:			equ	0h		;PLL mode value justified
 0000           
 0000           SLEEP_TIMER:			equ	0h		;Sleep Timer value
 0018           SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
 0000           SLEEP_TIMER_JUST:		equ	0h		;Sleep Timer value justified
 0000           
 0000           SLEEP_TIMER2:			equ	0h		;Sleep Extend value
 0010           SLEEP_TIMER_MASK2:		equ	10h		;Sleep Extend mask
 0000           SLEEP_TIMER_JUST2:		equ	0h		;Sleep Extend value justified
 0000           
 0001           SWITCH_MODE_PUMP:		equ	1h		;Switch Mode Pump setting
 0080           SWITCH_MODE_PUMP_MASK:	equ	80h		;Switch Mode Pump mask
 0080           SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
 0000           LVD_TBEN:               equ 0h   ; Low Voltage Throttle-back enable value
 0008           LVD_TBEN_MASK:          equ 8h  ; Low Voltage Throttle-back enable mask
 0000           LVD_TBEN_JUST:          equ 0h  ; Low Voltage Throttle-back enable justified
 0007           TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
 0007           TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
 0007           TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
 0000           
 0010           POWER_SETTING:			equ	10h
 0010           POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
 0010           POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
 0011           POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
 0008           POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
 0008           POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
 0009           POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
 0006           POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
 0004           POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
 0002           POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
 0001           POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
 0000           
 0001           COMM_RX_PRESENT:		equ	1		;1 = TRUE
 0000           WATCHDOG_ENABLE:		equ 0	;Watchdog Enable 1 = Enable
 0000           
 0009           CLOCK_DIV_VC1:			equ	9h	;VC1 clock divider
 00F0           CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
 0090           CLOCK_DIV_VC1_JUST:		equ	90h	;VC1 clock divider justified
 0009           CLOCK_DIV_VC2:			equ	9h	;VC2 clock divider
 000F           CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
 0009           CLOCK_DIV_VC2_JUST:		equ	9h	;VC2 clock divider justified
 0003           CLOCK_INPUT_VC3:		equ	3h	;VC3 clock source
 0003           CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
 0003           CLOCK_INPUT_VC3_JUST:	equ	3h	;VC3 clock source justified
 0005           CLOCK_DIV_VC3:			equ	5h	;VC3 clock divider
 00FF           CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
 0005           CLOCK_DIV_VC3_JUST:		equ	5h	;VC3 clock divider justified
 0005           ANALOG_POWER:			equ	5h	;Analog power control
 0007           ANALOG_POWER_MASK:		equ	7h	;Analog power control mask
 0005           ANALOG_POWER_JUST:		equ	5h	;Analog power control justified
 0001           OP_AMP_BIAS:			equ	1h	;Op amp bias level
 0040           OP_AMP_BIAS_MASK:		equ	40h	;Op amp bias level mask
 0040           OP_AMP_BIAS_JUST:		equ	40h	;Op amp bias level justified
 0002           REF_MUX:				equ	2h	;Ref mux setting
 0038           REF_MUX_MASK:			equ	38h	;Ref mux setting mask
 0010           REF_MUX_JUST:			equ	10h	;Ref mux setting justified
 0000           AGND_BYPASS:				equ	0h	;AGndBypass setting
 0040           AGND_BYPASS_MASK:			equ	40h	;AGndBypass setting mask
 0000           AGND_BYPASS_JUST:			equ	0h	;AGndBypass setting justified
 0000           SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
 0006           SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
 0000           SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
 0000           SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
 0001           SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
 0000           SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
 0000           ;
 0000           ; register initial values
 0000           ;
 0000           ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
 001F           PORT_0_GLOBAL_SELECT:	equ 1fh	;Port 0 global select register (PRT0GS)
 001E           PORT_0_DRIVE_0:			equ 1eh	;Port 0 drive mode 0 register (PRT0DM0)
 00E1           PORT_0_DRIVE_1:			equ e1h	;Port 0 drive mode 1 register (PRT0DM1)
 00E0           PORT_0_DRIVE_2:			equ e0h	;Port 0 drive mode 2 register (PRT0DM2)
 0000           PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
 0000           PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
 0000           PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
 0000           PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
 0000           PORT_1_DRIVE_0:			equ 0h	;Port 1 drive mode 0 register (PRT1DM0)
 00FF           PORT_1_DRIVE_1:			equ ffh	;Port 1 drive mode 1 register (PRT1DM1)
 00FF           PORT_1_DRIVE_2:			equ ffh	;Port 1 drive mode 2 register (PRT1DM2)
 0000           PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
 0000           PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
 0000           PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
 0000           PORT_2_GLOBAL_SELECT:	equ 0h	;Port 2 global select register (PRT2GS)
 0001           PORT_2_DRIVE_0:			equ 1h	;Port 2 drive mode 0 register (PRT2DM0)
 00FE           PORT_2_DRIVE_1:			equ feh	;Port 2 drive mode 1 register (PRT2DM1)
 00FE           PORT_2_DRIVE_2:			equ feh	;Port 2 drive mode 2 register (PRT2DM2)
 0000           PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
 0000           PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
 0000           PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
 0000           PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
 0000           PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
 0000           PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
 0000           PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
 0000           PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
 0000           PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
 0000           PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
 0000           PORT_4_GLOBAL_SELECT:	equ 0h	;Port 4 global select register (PRT4GS)
 0000           PORT_4_DRIVE_0:			equ 0h	;Port 4 drive mode 0 register (PRT4DM0)
 0000           PORT_4_DRIVE_1:			equ 0h	;Port 4 drive mode 1 register (PRT4DM1)
 0000           PORT_4_DRIVE_2:			equ 0h	;Port 4 drive mode 2 register (PRT4DM2)
 0000           PORT_4_INTENABLE:		equ 0h	;Port 4 interrupt enable register (PRT4IE)
 0000           PORT_4_INTCTRL_0:		equ 0h	;Port 4 interrupt control 0 register (PRT4IC0)
 0000           PORT_4_INTCTRL_1:		equ 0h	;Port 4 interrupt control 1 register (PRT4IC1)
 0000           PORT_5_GLOBAL_SELECT:	equ 0h	;Port 5 global select register (PRT5GS)
 0000           PORT_5_DRIVE_0:			equ 0h	;Port 5 drive mode 0 register (PRT5DM0)
 0000           PORT_5_DRIVE_1:			equ 0h	;Port 5 drive mode 1 register (PRT5DM1)
 0000           PORT_5_DRIVE_2:			equ 0h	;Port 5 drive mode 2 register (PRT5DM2)
 0000           PORT_5_INTENABLE:		equ 0h	;Port 5 interrupt enable register (PRT5IE)
 0000           PORT_5_INTCTRL_0:		equ 0h	;Port 5 interrupt control 0 register (PRT5IC0)
 0000           PORT_5_INTCTRL_1:		equ 0h	;Port 5 interrupt control 1 register (PRT5IC1)
 0000           
 0000           ; end of file GlobalParams.inc
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type C
 0020           DBC00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBC00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBC00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBC00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type C
 0024           DBC01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBC01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBC01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBC01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type C
 0028           DCC02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCC02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type C
 002C           DCC03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCC03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type C
 0030           DBC10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBC10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBC10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBC10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type C
 0034           DBC11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBC11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBC11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBC11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type C
 0038           DCC12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCC12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type C
 003C           DCC13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCC13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 20, Basic Type C
 0040           DBC20DR0:     equ 40h          ; data register 0                          (#)
 0041           DBC20DR1:     equ 41h          ; data register 1                          (W)
 0042           DBC20DR2:     equ 42h          ; data register 2                          (RW)
 0043           DBC20CR0:     equ 43h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 21, Basic Type C
 0044           DBC21DR0:     equ 44h          ; data register 0                          (#)
 0045           DBC21DR1:     equ 45h          ; data register 1                          (W)
 0046           DBC21DR2:     equ 46h          ; data register 2                          (RW)
 0047           DBC21CR0:     equ 47h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 22, Communications Type C
 0048           DCC22DR0:     equ 48h          ; data register 0                          (#)
 0049           DCC22DR1:     equ 49h          ; data register 1                          (W)
 004A           DCC22DR2:     equ 4Ah          ; data register 2                          (RW)
 004B           DCC22CR0:     equ 4Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 23, Communications Type C
 004C           DCC23DR0:     equ 4Ch          ; data register 0                          (#)
 004D           DCC23DR1:     equ 4Dh          ; data register 1                          (W)
 004E           DCC23DR2:     equ 4Eh          ; data register 2                          (RW)
 004F           DCC23CR0:     equ 4Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h   ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUX_CFG:     equ 61h          ; Analog Mux Configuration Register        (RW)
 0080           AMUX_CFG_BCOL1MUX:    equ 80h    ; MASK: column 1 input select
 0040           AMUX_CFG_ACOL0MUX:    equ 40h    ; MASK: column 0 input select
 0030           AMUX_CFG_INTCAP:      equ 30h    ; MASK: pin select for static mode
 000E           AMUX_CFG_MUXCLK:      equ 0Eh    ; MASK: MUXCLK1 source select
 0001           AMUX_CFG_EN:          equ 01h    ; MASK: MUXCLK enable
 0000           
 0062           CLK_CR3:      equ 62h          ; Analog Clock Source Control Register 3   (RW)
 000F           CLK_CR3_SYSDIR:       equ 0Fh    ; MASK: Column clock source select
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0002           CMP_CR1_CLK1X1:       equ 02h    ; MASK: Digital comparator bus 1 synch clock
 0001           CMP_CR1_CLK1X0:       equ 01h    ; MASK: Digital comparator bus 0 synch clock
 0000           
 006A           SADC_DH:      equ 6Ah          ; ADC Data High-Byte                       (RW)
 006B           SADC_DL:      equ 6Bh          ; ADC Data Low-Byte                        (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP0_DR:      equ 6Ch          ; deprecated do not use
 006D           TMP1_DR:      equ 6Dh          ; deprecated do not use
 006E           TMP2_DR:      equ 6Eh          ; deprecated do not use
 006F           TMP3_DR:      equ 6Fh          ; deprecated do not use
 0000           
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type C Row 0 Col 0
 0070           ACC00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACC00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACC00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACC00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type C Row 0 Col 1
 0074           ACC01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACC01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACC01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACC01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type C Row 0 Col 2
 0078           ACC02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACC02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACC02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACC02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type C Row 0 Col 3
 007C           ACC03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACC03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACC03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACC03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ; Decimator Data Registers
 0000           ;------------------------------------------------
 00A0           DEC0_DH:      equ A0h          ; Data Register 0( high byte)
 00A1           DEC0_DL:      equ A1h          ; Data Register 0( low byte)
 00A2           DEC1_DH:      equ A2h          ; Data Register 1( high byte)
 00A3           DEC1_DL:      equ A3h          ; Data Register 1( low byte)
 00A4           DEC2_DH:      equ A4h          ; Data Register 2( high byte)
 00A5           DEC2_DL:      equ A5h          ; Data Register 2( low byte)
 00A6           DEC3_DH:      equ A6h          ; Data Register 3( high byte)
 00A7           DEC3_DL:      equ A7h          ; Data Register 3( low byte)
 0000           
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           							   
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 00B7           RDI0DSM:      equ 0B7h          ; Row Digital Interconnect Row 0 Digital 
 0000                                           ; Delta-Sigma Modulator Select Register    (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 00BF           RDI1DSM:      equ 0BFh          ; Row Digital Interconnect Row 1 Digital 
 0000                                           ; Delta-Sigma Modulator Select Register    (RW)
 0000           
 00C0           RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
 00C1           RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
 00C2           RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
 00C3           RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
 00C4           RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
 00C5           RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
 00C6           RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
 00C7           RDI2DSM:      equ 0C7h          ; Row Digital Interconnect Row 2 Digital 
 0000                                           ; Delta-Sigma Modulator Select Register    (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C0_CFG:      equ 0D6h          ; I2C 0 Configuration Register             (RW)
 0040           I2C0_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C0_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C0_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C0_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C0_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C0_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C0_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C0_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C0_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C0_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 016B           I2C1_CFG:      equ 16Bh          ; I2C 1 Configuration Register             (RW)
 0040           I2C1_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C1_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C1_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C1_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C1_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C1_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C1_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C1_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C1_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C1_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C0_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C0_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C0_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C0_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C0_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C0_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C0_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C0_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C0_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00E4           I2C1_SCR:      equ 0E4h          ; I2C 1 Status and Control Register        (#)
 0080           I2C1_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C1_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C1_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C1_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C1_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C1_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C1_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C1_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C0_DR:       equ 0D8h         ; I2C 0 Data Register                      (RW)
 0067           I2C1_DR:       equ 067h         ; I2C 1 Data Register                      (RW)
 0000           
 00D9           I2C0_MSCR:     equ 0D9h         ; I2C 0 Master Status and Control Register  (#)
 0008           I2C0_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)         (R)
 0004           I2C0_MSCR_MODE:         equ 04h   ; MASK: Start has been generated          (R)
 0002           I2C0_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C0_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; Misc. Interrupt Mask Register            (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0020           INT_MSK3_ACOLUMN_5:        equ 20h ; MASK: enable/disable Analog col 5 interrupt
 0010           INT_MSK3_ACOLUMN_4:        equ 10h ; MASK: enable/disable Analog col 4 interrupt
 0008           INT_MSK3_RTC:              equ 08h ; MASK: enable/disable RTC interrupt
 0004           INT_MSK3_SARADC:           equ 04h ; MASK: enable/disable SARADC interrupt
 0002           INT_MSK3_I2C1:             equ 02h ; MASK: enable/disable I2C 1 interrupt
 0001           INT_MSK3_I2C0:             equ 01h ; MASK: enable/disable I2C 0 interrupt
 0000           
 00DF           INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register (2 of 2) (RW)
 0080           INT_MSK2_DCC33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
 0040           INT_MSK2_DCC32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
 0020           INT_MSK2_DBC31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
 0010           INT_MSK2_DBC30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
 0008           INT_MSK2_DCC23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
 0004           INT_MSK2_DCC22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
 0002           INT_MSK2_DBC21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
 0001           INT_MSK2_DBC20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 0000           //   Compatibility Set: Maps onto MAC0
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EA           MUL_RESULT:   equ 0EAh          ; Multiplier Result Data - WORD            (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00ED           ACC_DR0:      equ MAC_Y         ; read =  MAC Accumulator, byte 0          (RW)
 00EC           ACC_DR1:      equ MAC_X         ; read =  MAC Accumulator, byte 1          (RW)
 00EE           ACC_DR3:      equ MAC_CL0       ; read =  MAC Accumulator, byte 3          (RW)
 00EF           ACC_DR2:      equ MAC_CL1       ; read =  MAC Accumulator, byte 2          (RW)
 00EC           ACC_LOW_WORD: equ 0ECh          ; MAC Accumulator (Read low word)          (R)
 00EE           ACC_HI_WORD:  equ 0EEh          ; MAC Accumulator (Read high word)         (R)
 0000           
 0000           // Multiply/Accumulate Unit 0
 00E8           MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
 00E9           MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
 00EA           MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
 00EB           MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
 00EA           MUL0_RESULT:  equ 0EAh          ; Multiplier 0 Result Data - WORD
 00EC           MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
 00ED           MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
 00EE           MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
 00EF           MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
 00ED           ACC0_DR0:     equ MAC0_Y        ; read =  MAC 0 Accumulator, byte 0        (RW)
 00EC           ACC0_DR1:     equ MAC0_X        ; read =  MAC 0 Accumulator, byte 1        (RW)
 00EE           ACC0_DR3:     equ MAC0_CL0      ; read =  MAC 0 Accumulator, byte 3        (RW)
 00EF           ACC0_DR2:     equ MAC0_CL1      ; read =  MAC 0 Accumulator, byte 2        (RW)
 00EC           ACC0_LOW_WORD: equ 0ECh         ; MAC Accumulator (Read low word)          (R)
 00EE           ACC0_HI_WORD:  equ 0EEh         ; MAC Accumulator (Read high word)         (R)
 0000           
 0000           // Multiply/Accumulate Unit 1
 00A8           MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
 00A9           MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
 00AA           MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
 00AB           MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
 00AA           MUL1_RESULT:  equ 0AAh          ; Multiplier 1 Result Data - WORD          (R)
 00AC           MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
 00AD           MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
 00AE           MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
 00AF           MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
 00AD           ACC1_DR0:     equ MAC1_Y        ; read =  MAC 1 Accumulator, byte 0        (RW)
 00AC           ACC1_DR1:     equ MAC1_X        ; read =  MAC 1 Accumulator, byte 1        (RW)
 00AE           ACC1_DR3:     equ MAC1_CL0      ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AF           ACC1_DR2:     equ MAC1_CL1      ; read =  MAC 1 Accumulator, byte 2        (RW)
 00AC           ACC1_LOW_WORD: equ 0ACh         ; MAC Accumulator (Read low word)          (R)
 00AE           ACC1_HI_WORD:  equ 0AEh         ; MAC Accumulator (Read high word)         (R)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           								   
 00FC           IDAC1_D:      equ 0FCh          ; Left Analog Mux DAC Data Register        (RW)
 00FD           IDAC0_D:      equ 0FDh          ; Right Analog Mux DAC Data Register       (RW)
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
 0010           CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type C
 0020           DBC00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBC00IN:      equ 21h          ; Input Register                           (RW)
 0022           DBC00OU:      equ 22h          ; Output Register                          (RW)
 0023           DBC00CR1:     equ 23h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type C
 0024           DBC01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBC01IN:      equ 25h          ; Input Register                           (RW)
 0026           DBC01OU:      equ 26h          ; Output Register                          (RW)
 0027           DBC01CR1:     equ 27h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type C
 0028           DCC02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCC02IN:      equ 29h          ; Input Register                           (RW)
 002A           DCC02OU:      equ 2Ah          ; Output Register                          (RW)
 002B           DCC02CR1:     equ 2Bh          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type C
 002C           DCC03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCC03IN:      equ 2Dh          ; Input Register                           (RW)
 002E           DCC03OU:      equ 2Eh          ; Output Register                          (RW)
 002F           DCC03CR1:     equ 2Fh          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type C
 0030           DBC10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBC10IN:      equ 31h          ; Input Register                           (RW)
 0032           DBC10OU:      equ 32h          ; Output Register                          (RW)
 0033           DBC10CR1:     equ 33h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type C
 0034           DBC11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBC11IN:      equ 35h          ; Input Register                           (RW)
 0036           DBC11OU:      equ 36h          ; Output Register                          (RW)
 0037           DBC11CR1:     equ 37h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type C
 0038           DCC12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCC12IN:      equ 39h          ; Input Register                           (RW)
 003A           DCC12OU:      equ 3Ah          ; Output Register                          (RW)
 003B           DCC12CR1:     equ 3Bh          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type C
 003C           DCC13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCC13IN:      equ 3Dh          ; Input Register                           (RW)
 003E           DCC13OU:      equ 3Eh          ; Output Register                          (RW)
 003F           DCC13CR1:     equ 3Fh          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 20, Basic Type C
 0040           DBC20FN:      equ 40h          ; Function Register                        (RW)
 0041           DBC20IN:      equ 41h          ; Input Register                           (RW)
 0042           DBC20OU:      equ 42h          ; Output Register                          (RW)
 0043           DBC20CR1:     equ 43h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 21, Basic Type C
 0044           DBC21FN:      equ 44h          ; Function Register                        (RW)
 0045           DBC21IN:      equ 45h          ; Input Register                           (RW)
 0046           DBC21OU:      equ 46h          ; Output Register                          (RW)
 0047           DBC21CR1:     equ 47h          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 22, Communications Type C
 0048           DCC22FN:      equ 48h          ; Function Register                        (RW)
 0049           DCC22IN:      equ 49h          ; Input Register                           (RW)
 004A           DCC22OU:      equ 4Ah          ; Output Register                          (RW)
 004B           DCC22CR1:     equ 4Bh          ; Control Register                         (RW)
 0000           
 0000           ; Digital PSoC block 23, Communications Type C
 004C           DCC23FN:      equ 4Ch          ; Function Register                        (RW)
 004D           DCC23IN:      equ 4Dh          ; Input Register                           (RW)
 004E           DCC23OU:      equ 4Eh          ; Output Register                          (RW)
 004F           DCC23CR1:     equ 4Fh          ; Control Register                         (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0              (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h   ; MASK: Specify Clock Cor Analog Cloumn 3
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify Clock Cor Analog Cloumn 2
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify Clock Cor Analog Cloumn 1
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify Clock Cor Analog Cloumn 0
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1              (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC Block For Analog Source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC Block For Analog Source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0            (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass The Analog Buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High Power Mode On All Analog Buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation Source For Analog Column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation Source For Analog Column 1
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus to Global Outputs Enable Register   (RW)
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Select Column 0 Signal To Output
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Drives The Selected Column 0 Signal To GOO0
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Drives The Selected Column 0 Signal To GOO4
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Select Column 1 Signal To Output
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Drives The Selected Column 1 Signal To GOO1    
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Drives The Selected Column 1 Signal To GOO5
 0000           
 0065           CMP_GO_EN1:   equ 65h          ; Comparator Bus to Global Outputs Enable Register 1 (RW)
 0003           CMP_GO_EN_SEL2:       equ 03h    ; MASK: Select Column 2 Signal To Output
 0004           CMP_GO_EN_GOO2:       equ 04h    ; MASK: Drives The Selected Column 2 Signal To GOO2
 0008           CMP_GO_EN_GOO6:       equ 08h    ; MASK: Drives The Selected Column 2 Signal To GOO6
 0030           CMP_GO_EN_SEL3:       equ 30h    ; MASK: Select Column 3 Signal To Output
 0040           CMP_GO_EN_GOO3:       equ 40h    ; MASK: Drives The Selected Column 3 Signal To GOO3
 0080           CMP_GO_EN_GOO7:       equ 80h    ; MASK: Drives The Selected Column 3 Signal To GOO7
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1                (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation Ctrl For Analog Column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation Ctrl For Analog Column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0              (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h   ; MASK: Look Up Table 1 Selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look Up Table 0 Selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1              (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h   ; MASK: Look Up Table 3 Selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look Up Table 2 Selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2             (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 006A           AMUX_CFG1:    equ 6Ah          ; Analog Mux Config Register 1                       (RW)
 0001           AMUX_CFG1_EN0:        equ 01h    ; MASK: Enable/Disable MUXCLK 0 For Analog Mux Bus 0
 000E           AMUX_CFG1_MUXCLK0:    equ 0Eh    ; MASK: Clock Select For Analog Mux Bus 0
 0010           AMUX_CFG1_ACOl0MUX:   equ 10h    ; MASK: Analog Column 1 Input Select
 0020           AMUX_CFG1_ACOL3MUX:   equ 20h    ; MASK: Analog Column 3 Input Select
 0040           AMUX_CFG1_ABUSMUX2:   equ 40h    ; MASK: Analog Column 2 Analog Mux Bus Select
 0080           AMUX_CFG1_ABUSMUX3:   equ 80h    ; MASK: Analog column 3 Analog Mux Bus Select
 0000           
 0071           SADC_TSCR0:   equ 71h          ; SAR ADC Trigger Source Control Register 0          (RW)
 0072           SADC_TSCR1:   equ 72h          ; SAR ADC Trigger Source Control Register 1          (RW) 
 0081           SADC_TSCMPL:  equ 81h          ; SAR ADC Trigger Source Comparator Low Register     (RW)
 0082           SADC_TSCMPH:  equ 82h          ; SAR ADC Trigger Source Comparator High Register    (RW)
 0000           
 0073           ACE_AMD_CR0:   equ 73h          ; Analog Modulation Control Register 0               (RW)
 000F           ACE_AMD_CR0_AMOD0:    equ 0Fh    ; MASK: Column 0 analog modulation control signal select
 0000           
 0075           ACE_AMX_IN:    equ 75h          ; Analog Input Select Register                       (RW)
 00C0           ACE_AMX_IN_ACI3:      equ C0h    ; MASK: Selects Analog Column Mux 3
 0030           ACE_AMX_IN_ACI2:      equ 30h    ; MASK: Selects Analog Column Mux 2
 000C           ACE_AMX_IN_ACI1:      equ 0Ch    ; MASK: Selects Analog Column Mux 1
 0003           ACE_AMX_IN_ACI0:      equ 03h    ; MASK: Selects Analog Column Mux 0
 0000           
 0076           ACE_CMP_CR0:   equ 76h          ; Analog Comparator Bus 0 Register                   (RW)
 0077           ACE_CMP_CR1:   equ 77h          ; Analog Comparator Bus 1 Register                   (RW)
 0000           
 0079           ACE_CMP_GI_EN: equ 79h         ; Analog Type E Columns Compare Bus to Global Outputs Control Register (RW)
 0000           
 007A           ACE_ALT_CR0:   equ 7Ah          ; Analog LUT Control Register 0                      (RW)
 00F0           ACE_ALT_CR0_LUT1:     equ F0h    ; MASK: Select 1 Of 16 Logic Functions for Output Of Comparator Bus 1
 000F           ACE_ALT_CR0_LUT0:     equ 0Fh    ; MASK: Select 1 Of 16 Logic Functions for Output Of Comparator Bus 0
 0000           
 007B           ACE_ABF_CR0:   equ 7Bh         ; Analog Output Buffer Control Register 0            (RW)
 0080           ACE_ABF_CR0_ACE1MUX:  equ 80h    ; MASK: Set ACE Column 1 input to ACE column 1 or 0 input mux output
 0040           ACE_ABF_CR0_ACE0MUX:  equ 40h    ; MASK: Set ACE Column 0 input to ACE column 1 or 0 input mux output
 0000           
 007D           ACE00CR1:      equ 7Dh         ; Analog Continuous Time Type E Block Control Register 1               (RW)
 007E           ACE00CR2:      equ 7Eh         ; Analog Continuous Time Type E Block Control Register 2               (RW)
 0002           ACE00CR2_FULL_RANGE:  equ 02h    ; MASK: Input Range Select
 0001           ACE00CR2_PWR:         equ 01h    ; MASK: Analog Blocks Power Control
 0000           
 007F           ASE10CR0:      equ 7Fh         ; Analog Switch Cap Type E Block Control Register 0  (RW)        
 0000           
 0083           ACE_AMD_CR1:   equ 83h         ; Analog Modulation Control Register 1               (RW)
 0070           ACE_AMD_CR1_AMOD3:    equ 70h    ; MASK: Column 3 Analog Modulation Control Signal Select
 000F           ACE_AMD_CR1_AMOD1:    equ 0Fh    ; MASK: Column 1 Analog Modulation Control Signal Select
 0000           
 0085           ACE_PWM_CR:    equ 85h         ; ADC PWM Control Register                           (RW)
 0038           ACE_PWM_CR_HIGH:      equ 38h    ; MASK: PWM High Time Control
 0006           ACE_PWM_CR_LOW:       equ 06h    ; MASK: PWM Low Time Control
 0001           ACE_PWM_CR_PWMEN:     equ 01h    ; MASK: PWM Enable/Disable
 0000           
 0086           ACE_ADC0_CR:   equ 86h         ; ADC Column 0 Configuration Register                (RW)
 0087           ACE_ADC1_CR:   equ 87h         ; ADC Column 1 Configuration Register                (RW)
 0080           ACE_ADC_CR_CMPST:     equ 80h    ; MASK: Comparator State
 0040           ACE_ADC_CR_LOREN:     equ 40h    ; MASK: ADC Current Range Control
 0020           ACE_ADC_CR_SHEN:      equ 20h    ; MASK: Sample And Hold Enable
 0008           ACE_ADC_CR_CBSRC:     equ 08h    ; MASK: Digital Comparator Bus Source
 0004           ACE_ADC_CR_AUTO:      equ 04h    ; MASK: Auto ADC Mode
 0001           ACE_ADC_CR_ADCEN:     equ 01h    ; MASK: ADC Enable
 0000           
 0089           ACE_CLK_CR0:   equ 89h         ; Analog Column Clock Control Register 0             (RW)
 00C0           ACE_CLK_CR0_ACOL3:    equ C0h    ; MASK: Clock Selection For Column 3
 0030           ACE_CLK_CR0_ACOL2:    equ 30h    ; MASK: Clock Selection For Column 2
 000C           ACE_CLK_CR0_ACOL1:    equ 0Ch    ; MASK: Clock Selection For Column 1
 0003           ACE_CLK_CR0_ACOL0:    equ 03h    ; MASK: Clock Selection For Column 0
 0000           
 008A           ACE_CLK_CR1:   equ 8Ah         ; Analog Column Clock Control Register 1             (RW)
 00F0           ACE_CLK_CR1_ACLK1:    equ F0h    ; MASK: Select The Clocking Source For Analog Clock 1
 000F           ACE_CLK_CR1_ACLK0:    equ 0Fh    ; MASK: Select The Clocking Source For Analog Clock 0
 0000           
 008B           ACE_CLK_CR3:   equ 8Bh         ; Analog Column Clock Control Register 3             (RW)
 0040           ACE_CLK_CR3_SYS1:     equ 40h    ; MASK: Column 1 Clock Selection
 0030           ACE_CLK_CR3_DIVCLK10: equ 30h    ; MASK: Column 1 Clock Divide Selection
 0004           ACE_CLK_CR3_SYS0:     equ 04h    ; MASK: Column 0 Clock Selection
 0003           ACE_CLK_CR3_DIVCLK0:  equ 03h    ; MASK: Column 0 Clock Divide Selection
 0000           
 008D           ACE01CR1:      equ 8Dh         ; Analog Continuous Time Type E Block Control Register 1               (RW)
 0040           ACE01CR1_COMPBUS:     equ 40h    ; MASK: Comparator Bus Output Enable/Disable
 0038           ACE01CR1_NMUX:        equ 38h    ; MASK: Encodeing For Negative Input Select
 0007           ACE01CR1_PMUX:        equ 07h    ; MASK: Encodeing For Positive Input Select
 0000           
 008E           ACE01CR2:      equ 8Eh         ; Analog Continuous Time Type E Block Control Register 2               (RW)
 0002           ACE01CR2_FULLRANGE:   equ 02h    ; MASK: Input Voltage Range Selection
 0001           ACE01CR2_PWR:         equ 01h    ; MASK: Power On/Off For Column Analog Blocks
 0000           
 008F           ASE11CR0:      equ 8Fh         ; Analog Switch Cap Type E Block Control Register 0  (RW)
 0080           ASECR_FVAL:           equ 80h    ; MASK: F Capacitor Value Section Bit
 0000           
 0091           DEC0_CR0:      equ 91h         ; Decimator 0 Control Register 0                     (RW)
 0092           DEC_CR3:       equ 92h         ; Decimator Control Register 3                       (RW)
 0095           DEC1_CR0:      equ 95h         ; Decimator 1 Control Register 0                     (RW)
 0096           DEC_CR4:       equ 96h         ; Decimator Control Register 4                       (RW)
 0099           DEC2_CR0:      equ 99h         ; Decimator 2 Control Register 0                     (RW)
 009A           DEC_CR5:       equ 9Ah         ; Decimator Control Register 5                       (RW)
 009D           DEC3_CR0:      equ 9Dh         ; Decimator Control Register 3                       (RW)
 0000           
 00A0           GDI_O_IN_CR:   equ A0h         ; Global Digital Interconnect Odd Input Register     (RW)
 00A1           GDI_E_IN_CR:   equ A1h         ; Global Digital Interconnect Even Input Register    (RW)
 0000           
 00A2           GDI_O_OU_CR:   equ A2h         ; Global Digital Interconnect Odd Output Register    (RW)
 00A3           GDI_E_OU_CR:   equ A3h         ; Global Digital Interconnect Even Output Register   (RW)
 0000           
 00A4           RTC_H:         equ A4h         ; Current RTC Hour Value Register                    (RW)
 00A5           RTC_M:         equ A5h         ; Current RTC Minute Value Register                  (RW) 
 00A6           RTC_S:         equ A6h         ; Current RTC Second Value Register                  (RW) 
 00A7           RTC_CR:        equ A7h         ; RTC Control Register                               (RW)
 00C0           RTC_CR_TREG:          equ C0h    ; MASK: Test Mode Select
 0020           RTC_CR_INT_EN:        equ 20h    ; MASK: RTC Interrupt Enable/Disable
 0010           RTC_CR_CLKSE:         equ 10h    ; MASK: RTC Clock Select
 000C           RTC_CR_INT_SEL:       equ 0Ch    ; MASK: Interrupt Select
 0002           RTC_CR_SYNCRD_EN:     equ 02h    ; MASK: Data Buffer Read
 0001           RTC_CR_RTC_EN:        equ 01h    ; MASK: RTC Enable/Disable
 0000           
 00A8           SADC_CR0:      equ A8h         ; SAR ADC Control Register 0                         (RW)
 0080           SADC_CR0_ADC_TST1:    equ 80h    ; MASK: Set SAR ADC Data Register to Write-Only
 0078           SADC_CR0_ADC_CHS:     equ 78h    ; MASK: Channel Selection
 0004           SADC_CR0_READY:       equ 04h    ; MASK: Set Data Ready Bit
 0002           SADC_CR0_START:       equ 02h    ; MASK: A-D Conversion Started
 0001           SADC_CR0_ADC_EN:      equ 01h    ; MASK: ADC Function Enable/Disable
 0000           
 00A9           SADC_CR1:      equ A9h         ; SAR ADC Control Register 1                         (RW)
 00C0           SADC_CR1_CVTMD:       equ C0h    ; MASK: SAR ADC Conversion Mode Select
 0030           SADC_CR1_TIGSEL:      equ 30h    ; MASK: Auto-Trigger Source Select
 000E           SADC_CR1_CLKSEL:      equ 0Eh    ; MASK: SAR ADC Clock Select
 0001           SADC_CR1_ALIGN_EN:    equ 01h    ; MASK: Auto-Align Function Enable/Disable
 0000           
 00AA           SADC_CR2:      equ AAh         ; SAR ADC Control Register 2                         (RW)
 0080           SADC_CR2_REFSEL:      equ 80h    ; MASK: External Vref Select
 0040           SADC_CR2_BUFEN:       equ 40h    ; MASK: Vref Buffer Enable/Disable
 0020           SADC_CR2_VDBEN:       equ 20h    ; MASK: ADC Comparator Voltage Doubler Enable/Disable
 0010           SADC_CR2_VDB_CLK:     equ 10h    ; MASK: VDB Clock Select
 0008           SADC_CR2_FREESUN:     equ 08h    ; MASK: ADC FREERUN Mode Enable/Disable
 0004           SADC_CR2_ADC_EXT_HALFVDD:  equ 04h    ; MASK: Vdd/2 Source Select
 0003           SADC_CR2_ADC_MODE:         equ 03h    ; MASK: Set ADC Mode
 0000           
 00AB           SADC_CR3:      equ ABh         ; SAR ADC Control Register 3                         (RW)
 0080           SADC_CR3_LALIGN:      equ 80h    ; MASK: Left-Justified Data Format Enable/Disable
 0007           SADC_CR3_ADC_TRIM0:   equ 07h    ; MASK: SAR ADC Trim Value
 0000            
 00AC           SADC_CR4:      equ ACh         ; SAR ADC Control Register 4                         (RW)
 0080           SADC_CR4_EXTREF:      equ 80h    ; MASK: External Vref Select
 0002           SADC_CR4_ADC_TST2:    equ 02h    ; MASK: Can Be Set Only In Test Mode
 0001           SADC_CR4_ADC_CMP:     equ 01h    ; MASK: ADC Comparator Output Data
 0000                                            ;       Only Active When ADC_TST2 is 1
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ D0h          ; Global Dig Interconnect Odd Inputs Reg             (RW)
 00D1           GDI_E_IN:     equ D1h          ; Global Dig Interconnect Even Inputs Reg            (RW)
 00D2           GDI_O_OU:     equ D2h          ; Global Dig Interconnect Odd Outputs Reg            (RW)
 00D3           GDI_E_OU:     equ D3h          ; Global Dig Interconnect Even Outputs Reg           (RW)
 0000           
 00D4           DEC0_CR:      equ D4h          ; Decimator 0 Control Register                       (RW)
 00D5           DEC1_CR:      equ D5h          ; Decimator 1 Control Register                       (RW)
 00D6           DEC2_CR:      equ D6h          ; Decimator 2 Control Register                       (RW)
 00D7           DEC3_CR:      equ D7h          ; Decimator 3 Control Register                       (RW)
 0000           
 00D8           MUX_CR0:      equ D8h          ; Analog Mux Port Bit Enables Register 0             (RW)
 00D9           MUX_CR1:      equ D9h          ; Analog Mux Port Bit Enables Register 1             (RW)
 00DA           MUX_CR2:      equ DAh          ; Analog Mux Port Bit Enables Register 2             (RW)
 00DB           MUX_CR3:      equ DBh          ; Analog Mux Port Bit Enables Register 3             (RW)
 00EC           MUX_CR4:      equ ECh          ; Analog Mux Port Bit Enables Register 4             (RW)
 00ED           MUX_CR5:      equ EDh          ; Analog Mux Port Bit Enables Register 5             (RW)
 0000           
 00DC           IDAC_CR1:     equ DCh          ; Analog Mux DAC Control Register 1                  (RW)
 00FD           IDAC_CR0:     equ FDh          ; Analog Mux DAC Control Register 0                  (RW)
 0080           IDAC_CR0_SPLIT_MUX:    equ 80h   ; MASK: Analog Mux Bus configuration
 0040           IDAC_CR0_MUXCLK_GE:    equ 40h   ; MASK: Global Enable Connection for MUXCLK1
 0030           IDAC_CR0_OSCMD0:       equ 30h   ; MASK: Analog Mux Bus 0 Reset Configuration
 0008           IDAC_CR0_IRANGE:       equ 08h   ; MASK: Sets the IDAC Range
 0006           IDAC_CR0_OSCMD1:       equ 06h   ; MASK: Analog Mux Bus 1 Reset Configuration 
 0001           IDAC_CR0_EN1:          equ 01h   ; MASK: IDAC 1 Function Enable/Disable
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register      (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4                     (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock Source (Deprecated)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock Source (Recommended)
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3                     (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0              (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h   ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h           ; ADC Column 0 Trim Register              (RW)
 00E6           ADC1_TR:      equ 0E6h           ; ADC Column 1 Trim Register              (RW)
 0000           
 00E7           IDAC_MODE:    equ 0E7h           ; IDAC Mode Register                      (RW)
 00F0           IDAC_MODE_IDAC0:      equ F0h    ; MASK: IDAC 0 Mode
 000F           IDAC_MODE_IDAC1:      equ 0Fh    ; MASK: IDAC 1 Mode
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (RW)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (RW)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (RW)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (RW)
 00EF           IMO_TR1:      equ 0EFh          ; Internal Main Oscillator Trim Register 1 (RW)
 0003           IMO_TR1_CATA_TRIM:    equ 03h    ; MASK: CATA Current Tuning Bits
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Flash Bank Select
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 00F8           bSSC_KEY1:                          equ      0F8h   ; supervisory key
 00F9           bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
 00FA           bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
 0000           
 003A           OPER_KEY:                           equ      3Ah   ; operation key
 0000           
 0000           ;----------------------------------
 0000           ; SSC_Action macro command codes
 0000           ;----------------------------------
 0001           FLASH_READ:                         equ      1     ; flash read command
 0002           FLASH_WRITE:                        equ      2     ; flash write command
 0003           FLASH_ERASE:                        equ      3     ; flash erase command
 0004           PROTECT_BLOCK:                      equ      4     ; flash protect block command
 0006           TABLE_READ:                         equ      6     ; table read command
 0007           FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
 0008           CALIBRATE0:                         equ      8     ; Calibrate without checksum
 0009           CALIBRATE1:                         equ      9     ; Calibrate with checksum
 0000           
 0000           ;----------------------------------
 0000           ; SSC_Action Flash table addresses
 0000           ;----------------------------------
 0000           ; Table 0 Values
 00F8           SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
 00F9           SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
 0000           
 0000           ; Table 1 Values
 00F8           SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
 00F9           SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
 00FA           SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
 00FB           SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
 00FC           SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
 00FD           SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
 00FE           SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
 00FF           SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
 0000               ; legacy names:
 00F8               VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
 00F9               OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim value
 00FC               VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
 00FD               OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim value
 0000           
 0000           ; Table 2 Values
 00F8           SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
 00F9           SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
 00FA           SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
 00FB           SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
 00FC           SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
 00FD           SSCTBL2_TRIM_IMO_2V_6MHZ:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
 00FE           SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
 0000           
 0000           
 0000           ;-----------------------------------------------------------------------------
 0000           ;  MACRO SSC_Action( OpCode )
 0000           ;
 0000           ;  DESCRIPTION:
 0000           ;     Performs supervisory operations defined in Supervisory ROM (SROM)
 0000           ;     section of Technical Reference Manual and/or Datasheet.
 0000           ;-----------------------------------------------------------------------------
 0000           ;
 0000           ;  ARGUMENTS:
 0000           ;     BYTE  OpCode   - specified supervisory operation - defined operations
 0000           ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
 0000           ;                            FLASH_CHECKSUM, PROTECT_BLOCK
 0000           ;  RETURNS:
 0000           ;     Nothing
 0000           ;
 0000           ;  SIDE EFFECTS:
 0000           ;     The values of the A and X registers are modified
 0000           ;
 0000           ;  PROCEDURE:
 0000           ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
 0000           ;     2) insert the flash Supervisory key in [KEY1]
 0000           ;     3) store function code in A
 0000           ;     4) call the supervisory code
 0000           ;
 0000               macro SSC_Action( OpCode )
 0000           ;   !!! DO NOT CHANGE THIS CODE !!!
 0000           ;       This sequence of opcodes provides a
 0000           ;       signature for the debugger and ICE.
 0000               mov   X, SP                            ; copy SP into X
 0000               mov   A, X                             ; mov to A
 0000               add   A, 3                             ; create 3 byte stack frame
 0000               mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
 0000               mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
 0000               mov   A, @OpCode                       ; load A with specific Flash operation
 0000               SSC                                    ; SSC call the supervisory code
 0000           ;   !!! DO NOT CHANGE THIS CODE !!!
 0000               macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim, Bypass )
 0000               mov A, reg[0xD0]  ; CUR_PP
 0000                   push A
 0000                   mov reg[0xD0], 0
 0000               mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
 0000               SSC_Action TABLE_READ                  ; Perform a table read supervisor call
 0000               M8C_SetBank1
 0000               mov   A, [@IMO_Trim]
 0000               mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
 0000               mov   A, [@Volt_Trim]
 0000             IF ( @Bypass )
 0000               or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
 0000             ENDIF
 0000               mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
 0000               M8C_SetBank0
 0000                   pop A
 0000                   mov reg[0xD0], A
 0000               macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim, Bypass )
 0000               mov A, reg[0xD0]  ; CUR_PP
 0000                   push A
 0000                   mov reg[0xD0], 0
 0000               mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
 0000               SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
 0000               M8C_SetBank1                           ; (Note, preserved across next SSC!)
 0000               mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
 0000               mov   reg[IMO_TR], A
 0000               mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
 0000               SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
 0000               mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
 0000             IF ( @Bypass )
 0000               or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
 0000             ENDIF
 0000               mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
 0000               M8C_SetBank0
 0000                   pop A
 0000                   mov reg[0xD0], A
 0000               macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim, Bypass )
 0000               mov A, reg[0xD0]  ; CUR_PP
 0000                   push A
 0000                   mov reg[0xD0], 0
 0000               mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
 0000               SSC_Action TABLE_READ                  ; Perform a table read supervisor call
 0000               M8C_SetBank1
 0000               mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
 0000             IF ( @Bypass )
 0000               or    A, AGND_BYPASS_MASK              ; OR in the bypass setting, if any
 0000             ENDIF
 0000               mov   reg[BDG_TR], A                   ; Update the register value
 0000               M8C_SetBank0
 0000                   pop A
 0000                   mov reg[0xD0], A
 0000               macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
 0000               mov A, reg[0xD0]  ; CUR_PP
 0000                   push A
 0000                   mov reg[0xD0], 0
 0000               mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
 0000               SSC_Action TABLE_READ              ; Perform a table read supervisor call
 0000               M8C_SetBank1
 0000               mov   A, [@IMO_Trim]               ; Get the IMO trim seting
 0000               mov   reg[IMO_TR], A               ; Update the register value
 0000               M8C_SetBank0
 0000                   pop A
 0000                   mov reg[0xD0], A
 0003           SYSTEM_STACK_PAGE: equ 3   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C28045.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ; ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
                export __Start
                IF      (TOOLCHAIN & HITECH)
                ELSE
                export __bss_start
                export __data_start
                export __idata_start
                export __func_lit_start
                export __text_start
                ENDIF
                export  _bGetPowerSetting
                export   bGetPowerSetting       
                
                
                ;--------------------------------------
                ; Optimization flags
                ;--------------------------------------
                ;
                ; To change the value of these flags, modify the file boot.tpl, not
                ; boot.asm. See the notes in the banner comment at the beginning of
                ; this file.
                
                ; Optimization for Assembly language (only) projects and C-language projects
                ; that do not depend on the C compiler to initialize the values of RAM variables.
                ;   Set to 1: Support for C Run-time Environment initialization
                ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                ;
                IF      (TOOLCHAIN & HITECH)
                ; The C compiler will customize the startup code - it's not required here
                
                C_LANGUAGE_SUPPORT:              equ 0
                ELSE
 0001           C_LANGUAGE_SUPPORT:              equ 1
                ENDIF
                
                
                ; The following equate is required for proper operation. Reseting its value
                ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                ; selected.  If the designer chooses to not wait then stabilization of the ECO
                ; and PLL_Lock must take place within user code. See the family data sheet for
                ; the requirements of starting the ECO and PLL lock mode.
                ;
                ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                ;                invoking main
                ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                ;               the time code in main starts executing.
                ;
 0001           WAIT_FOR_32K:                    equ 1
 0000           
 0000           
 0000           
 0000           ; For historical reasons, by default the boot code uses an lcall instruction
 0000           ; to invoke the user's _main code. If _main executes a return instruction,
 0000           ; boot provides an infinite loop. By changing the following equate from zero
 0000           ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
 0000           ; bytes on the stack which are otherwise required for the return address. If
 0000           ; this option is enabled, _main must not return. (Beginning with the 4.2
 0000           ; release, the C compiler automatically places an infinite loop at the end
 0000           ; of main, rather than a return instruction.)
 0000           ;
 0000           ENABLE_LJMP_TO_MAIN:             equ 0
 0000           
 0000           
 0000           ;-----------------------------------------------------------------------------
 0000           ; Interrupt Vector Table
 0000           ;-----------------------------------------------------------------------------
 0000           ;
 0000           ; Interrupt vector table entries are 4 bytes long.  Each one contains
 0000           ; a jump instruction to an ISR (Interrupt Service Routine), although
 0000           ; very short ISRs could be encoded within the table itself. Normally,
 0000           ; vector jump targets are modified automatically according to the user
 0000           ; modules selected. This occurs when the 'Generate Application' opera-
 0000           ; tion is run causing PSoC Designer to create boot.asm and the other
 0000           ; configuration files. If you need to hard code a vector, update the
 0000           ; file boot.tpl, not boot.asm. See the banner comment at the beginning
 0000           ; of this file.
 0000           ;-----------------------------------------------------------------------------
 0000           
                    AREA TOP (ROM, ABS, CON)
                
                    org   0                        ;Reset Interrupt Vector
                IF      (TOOLCHAIN & HITECH)
                ;   jmp   __Start                  ;C compiler fills in this vector
                ELSE
 0000 807F          jmp   __Start                  ;First instruction executed following a Reset
                ENDIF
                
                    org   04h                      ;Supply Monitor Interrupt Vector
 0004 30            halt                           ;Stop execution if power falls too low
 0005           
                    org   08h                      ;Analog Column 0 / Decimator 0 Interrupt Vector
                    // call     void_handler
 0008 7E            reti
 0009           
                    org   0Ch                      ;Analog Column 1 / Decimator 1 Interrupt Vector
                    // call     void_handler
 000C 7E            reti
 000D           
                    org   10h                      ;Analog Column 2 / Decimator 2 Interrupt Vector
                    // call     void_handler
 0010 7E            reti
 0011           
                    org   14h                      ;Analog Column 3 / Decimator 3 Interrupt Vector
                    // call     void_handler
 0014 7E            reti
 0015               
                    org   18h                      ;VC3 Interrupt Vector
                    // call     void_handler
 0018 7E            reti
 0019           
                    org   1Ch                      ;GPIO Interrupt Vector
                    // call     void_handler
 001C 7E            reti
 001D           
                    org   20h                      ;PSoC Block DBC00 Interrupt Vector
                    // call     void_handler
 0020 7E            reti
 0021           
                    org   24h                      ;PSoC Block DBC01 Interrupt Vector
 0024 7D0000        ljmp        Dispatch_INTERRUPT_9
 0027 7E            reti
 0028           
                    org   28h                      ;PSoC Block DCC02 Interrupt Vector
 0028 7D0000        ljmp        Dispatch_INTERRUPT_10
 002B 7E            reti
 002C           
                    org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
 002C 7D0000        ljmp        Dispatch_INTERRUPT_11
 002F 7E            reti
 0030               
                    org   30h                      ;PSoC Block DBC10 Interrupt Vector
                    // call     void_handler
 0030 7E            reti
 0031           
                    org   34h                      ;PSoC Block DBC11 Interrupt Vector
                    // call     void_handler
 0034 7E            reti
 0035           
                    org   38h                      ;PSoC Block DCC12 Interrupt Vector
 0038 7D0000        ljmp        _HELLO_3_ISR
 003B 7E            reti
 003C           
                    org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
 003C 7D0000        ljmp        _HELLO_4_ISR
 003F 7E            reti
 0040           
                        org   40h                      ;PSoC Block DBC20 Interrupt Vector
                    // call     void_handler
 0040 7E            reti
 0041                   
                        org   44h                      ;PSoC Block DBC21 Interrupt Vector
                    // call     void_handler
 0044 7E            reti
 0045                   
                        org   48h                      ;PSoC Block DCC22 Interrupt Vector
                    // call     void_handler
 0048 7E            reti
 0049                   
                        org   4Ch                      ;PSoC Block DCC23 Interrupt Vector
                    // call     void_handler
 004C 7E            reti
 004D                    
                    org   60h                      ;PSoC I2C0 Interrupt Vector
                    // call     void_handler
 0060 7E            reti
 0061           
                        org   64h                      ;PSoC I2C1 Interrupt Vector
                    // call     void_handler
 0064 7E            reti
 0065                   
                        org   68h                      ;PSoC SARADC Interrupt Vector
                    // call     void_handler
 0068 7E            reti
 0069                   
                        org   6Ch                      ;PSoC RTC Interrupt Vector
                    // call     void_handler
 006C 7E            reti
 006D                   
                        org   70h                      ;Analog Column 4 Interrupt Vector
                    // call     void_handler
 0070 7E            reti
 0071                   
                        org   74h                      ;Analog Column 5 Interrupt Vector
                    // call     void_handler
 0074 7E            reti
 0075                   
                    org   7Ch                      ;Sleep Timer Interrupt Vector
                    // call     void_handler
 007C 7E            reti
 007D           
 007D           ;-----------------------------------------------------------------------------
 007D           ;  Start of Execution.
 007D           ;-----------------------------------------------------------------------------
 007D           ;  The Supervisory ROM SWBootReset function has already completed the
 007D           ;  calibrate1 process, loading trim values for 5 volt operation.
 007D           ;
 007D           
                IF      (TOOLCHAIN & HITECH)
                        AREA PD_startup(CODE, REL, CON)
                ELSE
                    org 80h
                ENDIF
 0080           __Start:
 0080           
 0080               ; initialize SMP values for voltage stabilization, if required,
 0080               ; leaving power-on reset (POR) level at the default (low) level, at
 0080               ; least for now. 
 0080               ;
 0080 7110          or    F, FLAG_XIO_MASK
 0082 62E387        mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
 0085 70EF          and   F, ~FLAG_XIO_MASK
 0087           
                IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                    and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
                ENDIF
                
                IF ( SELECT_32K )
                    or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                ELSE
 0087 41FEFB        and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                ENDIF
                
                    ;---------------------------
                    ; Set up the Temporary stack
                    ;---------------------------
                    ; A temporary stack is set up for the SSC instructions.
                    ; The real stack start will be assigned later.
                    ;
 0080           _stack_start:          equ 80h
 008A 5080          mov   A, _stack_start          ; Set top of stack to end of used RAM
 008C 4E            swap  SP, A                    ; This is only temporary if going to LMM
 008D           
 008D               ;------------------------
 008D               ; Set Power-related Trim 
 008D               ;------------------------
 008D           
                IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                 IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                    or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                    mov A, reg[0xD0]  ; CUR_PP
                        push A
                        mov reg[0xD0], 0
                    mov   [bSSC_TABLE_TableId], 2    ; Point to Flash Table for IMO Trim
                    mov   X, SP                            ; copy SP into X
                    mov   A, X                             ; mov to A
                    add   A, 3                             ; create 3 byte stack frame
                    mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
                    mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
                    mov   A, TABLE_READ                       ; load A with specific Flash operation
                    SSC                                    ; SSC call the supervisory code
                ;   !!! DO NOT CHANGE THIS CODE !!!
                    or    F, FLAG_XIO_MASK
                    mov   A, [SSCTBL2_TRIM_IMO_5V_6MHZ]                   ; Set the main oscillator trim
                    mov   reg[IMO_TR], A
                    mov   [bSSC_TABLE_TableId], 1    ; Point to Flash Table for Volt Trim
                    mov   X, SP                            ; copy SP into X
                    mov   A, X                             ; mov to A
                    add   A, 3                             ; create 3 byte stack frame
                    mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
                    mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
                    mov   A, TABLE_READ                       ; load A with specific Flash operation
                    SSC                                    ; SSC call the supervisory code
                ;   !!! DO NOT CHANGE THIS CODE !!!
                    mov   A, [SSCTBL1_TRIM_BGR_5V]                  ; Set the bandgap voltage trim
                  IF ( AGND_BYPASS_JUST )
                    or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
                  ENDIF
                    mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
                    and   F, ~FLAG_XIO_MASK
                        pop A
                        mov reg[0xD0], A
                ELSE
                        IF ( AGND_BYPASS )
                    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                    ; The 5V trim has already been set, but we need to update the AGNDBYP
                    ; bit in the write-only BDG_TR register. Recalculate the register
                    ; value using the proper trim values.
                    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                    mov A, reg[0xD0]  ; CUR_PP
                        push A
                        mov reg[0xD0], 0
                    mov   [bSSC_TABLE_TableId], 1     ; Point to Flash Table
                    mov   X, SP                            ; copy SP into X
                    mov   A, X                             ; mov to A
                    add   A, 3                             ; create 3 byte stack frame
                    mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
                    mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
                    mov   A, TABLE_READ                       ; load A with specific Flash operation
                    SSC                                    ; SSC call the supervisory code
                ;   !!! DO NOT CHANGE THIS CODE !!!
                    or    F, FLAG_XIO_MASK
                    mov   A, [SSCTBL1_TRIM_BGR_5V]                  ; Get the bandgap trim seting
                  IF ( AGND_BYPASS_JUST )
                    or    A, AGND_BYPASS_MASK              ; OR in the bypass setting, if any
                  ENDIF
                    mov   reg[BDG_TR], A                   ; Update the register value
                    and   F, ~FLAG_XIO_MASK
                        pop A
                        mov reg[0xD0], A
                  ENDIF
                 ENDIF
                ENDIF ; 5.0 V Operation
                
                IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                 IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                    or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                    mov A, reg[0xD0]  ; CUR_PP
                        push A
                        mov reg[0xD0], 0
                    mov   [bSSC_TABLE_TableId], 2    ; Point to Flash Table for IMO Trim
                    mov   X, SP                            ; copy SP into X
                    mov   A, X                             ; mov to A
                    add   A, 3                             ; create 3 byte stack frame
                    mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
                    mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
                    mov   A, TABLE_READ                       ; load A with specific Flash operation
                    SSC                                    ; SSC call the supervisory code
                ;   !!! DO NOT CHANGE THIS CODE !!!
                    or    F, FLAG_XIO_MASK
                    mov   A, [SSCTBL2_TRIM_IMO_3V_6MHZ]                   ; Set the main oscillator trim
                    mov   reg[IMO_TR], A
                    mov   [bSSC_TABLE_TableId], 1    ; Point to Flash Table for Volt Trim
                    mov   X, SP                            ; copy SP into X
                    mov   A, X                             ; mov to A
                    add   A, 3                             ; create 3 byte stack frame
                    mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
                    mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
                    mov   A, TABLE_READ                       ; load A with specific Flash operation
                    SSC                                    ; SSC call the supervisory code
                ;   !!! DO NOT CHANGE THIS CODE !!!
                    mov   A, [SSCTBL1_TRIM_BGR_3V]                  ; Set the bandgap voltage trim
                  IF ( AGND_BYPASS_JUST )
                    or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
                  ENDIF
                    mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
                    and   F, ~FLAG_XIO_MASK
                        pop A
                        mov reg[0xD0], A
                 ELSE                                          ; *** 12MHZ Main Oscillator ***
                    mov A, reg[0xD0]  ; CUR_PP
                        push A
                        mov reg[0xD0], 0
                    mov   [bSSC_TABLE_TableId], 1     ; Point to requested Flash Table
                    mov   X, SP                            ; copy SP into X
                    mov   A, X                             ; mov to A
                    add   A, 3                             ; create 3 byte stack frame
                    mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
                    mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
                    mov   A, TABLE_READ                       ; load A with specific Flash operation
                    SSC                                    ; SSC call the supervisory code
                ;   !!! DO NOT CHANGE THIS CODE !!!
                    or    F, FLAG_XIO_MASK
                    mov   A, [SSCTBL1_TRIM_IMO_3V_24MHZ]
                    mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
                    mov   A, [SSCTBL1_TRIM_BGR_3V]
                  IF ( AGND_BYPASS_JUST )
                    or    A, AGND_BYPASS_MASK              ; OR in the bypass setting
                  ENDIF
                    mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
                    and   F, ~FLAG_XIO_MASK
                        pop A
                        mov reg[0xD0], A
                 ENDIF
                ENDIF ; 3.3 Volt Operation
                
                
 008D 55F800        mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
 0090 55F900        mov  [bSSC_KEYSP], 0
 0093           
 0093               ;---------------------------------------
 0093               ; Initialize Crystal Oscillator and PLL
 0093               ;---------------------------------------
                IF ( SELECT_32K & WAIT_FOR_32K )
                    ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                    ; on and wait for it to stabilize and the system to switch over to it. The PLL
                    ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
                    ; the ECO to stabilize.
                    ;
                    or    F, FLAG_XIO_MASK
                    mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                    and   F, ~FLAG_XIO_MASK
                    mov   reg[RES_WDT], 38h
                    or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                    mov   reg[INT_VC],   0                ; Clear all pending interrupts
                .WaitFor1s:
                    tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                    jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                                          ;  since interrupts are not globally enabled
                ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                    ; Either no ECO, or waiting for stable clock is to be done in main
 0093 7110          or    F, FLAG_XIO_MASK
 0095 62E002        mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
 0098 70EF          and   F, ~FLAG_XIO_MASK
 009A 62E338        mov   reg[RES_WDT], 38h
 009D           
                ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                
                IF ( PLL_MODE )
                    ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                    ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                    ;
                    or    F, FLAG_XIO_MASK
                    mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                    and   F, ~FLAG_XIO_MASK
                    mov   reg[RES_WDT], 38h
                    mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                
                .WaitFor16ms:
                    tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                    jz   .WaitFor16ms
                    or    F, FLAG_XIO_MASK
                    mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                    and   F, ~FLAG_XIO_MASK
                
                IF      ( WAIT_FOR_32K )
                ELSE ; !( WAIT_FOR_32K )
                    ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                    ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                ENDIF ;(WAIT_FOR_32K)
                ENDIF ;(PLL_MODE)
                
                    ;------------------------
                    ; Close CT leakage path.
                    ;------------------------
 009D 627105        mov   reg[0x71], 05h
 00A0 627205        mov   reg[0x72], 05h
 00A3 627305        mov   reg[0x73], 05h
 00A6 627405        mov   reg[0x74], 05h
 00A9           
 00A9           
 00A9           
                IF      (TOOLCHAIN & HITECH)
                    ;---------------------------------------------
                    ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                    ;---------------------------------------------
                        global          __Lstackps
                        mov     a,low __Lstackps
                        swap    a,sp
                
                IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[STK_PP], SYSTEM_STACK_PAGE
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], 0
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[MVW_PP], 0
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[MVR_PP], 0
                   ENDIF
                    IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                      or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                    ELSE
                      or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                    ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                ELSE
                    ;---------------------------------------------
                    ; ImageCraft Enter the Large Memory Model, if applicable
                    ;---------------------------------------------
                IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00A9 62D103          mov reg[STK_PP], SYSTEM_STACK_PAGE
                   ENDIF
 00AC 5000          mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
 00AE 4E            swap  A, SP
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00AF 62D303          mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00B2 62D000          mov reg[CUR_PP], 0
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00B5 62D500          mov reg[MVW_PP], 0
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00B8 62D400          mov reg[MVR_PP], 0
                   ENDIF
                
                  IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
 00BB 71C0          or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                  ELSE
                    or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                  ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                ELSE
                    mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                    swap  SP, A
                ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                ENDIF ; TOOLCHAIN
                
                    ;-------------------------
                    ; Load Base Configuration
                    ;-------------------------
                    ; Load global parameter settings and load the user modules in the
                    ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                    ; to minimize start up time; (2) We may still need to play with the
                    ; Sleep Timer.
                    ;
 00BD 7C0000        lcall LoadConfigInit
 00C0 70EF          and   F, ~FLAG_XIO_MASK
 00C2           
 00C2               ;-----------------------------------
 00C2               ; Initialize C Run-Time Environment
 00C2               ;-----------------------------------
                IF ( C_LANGUAGE_SUPPORT )
                IF ( SYSTEM_SMALL_MEMORY_MODEL )
                    mov  A,0                           ; clear the 'bss' segment to zero
                    mov  [__r0],<__bss_start
                BssLoop:
                    cmp  [__r0],<__bss_end
                    jz   BssDone
                    mvi  [__r0],A
                    jmp  BssLoop
                BssDone:
                    mov  A,>__idata_start              ; copy idata to data segment
                    mov  X,<__idata_start
                    mov  [__r0],<__data_start
                IDataLoop:
                    cmp  [__r0],<__data_end
                    jz   C_RTE_Done
                    push A
                    romx
                    mvi  [__r0],A
                    pop  A
                    inc  X
                    adc  A,0
                    jmp  IDataLoop
                
                ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                
                IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00C2 62D000        mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
 00C5                                                  ; to use the Virtual Register page.
 00C5           
 00C5               ; Dereference the constant (flash) pointer pXIData to access the start
 00C5               ; of the extended idata area, "xidata." Xidata follows the end of the
 00C5               ; text segment and may have been relocated by the Code Compressor.
 00C5               ;
 00C5 5000          mov   A, >__pXIData                ; Get the address of the flash
 00C7 5700          mov   X, <__pXIData                ;   pointer to the xidata area.
 00C9 08            push  A
 00CA 28            romx                               ; get the MSB of xidata's address
 00CB 5300          mov   [__r0], A
 00CD 18            pop   A
 00CE 75            inc   X
 00CF 0900          adc   A, 0
 00D1 28            romx                               ; get the LSB of xidata's address
 00D2 4B            swap  A, X
 00D3 5100          mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
 00D5                                                  ;   XIData structure list in flash
 00D5 8004          jmp   .AccessStruct
 00D7           
 00D7               ; Unpack one element in the xidata "structure list" that specifies the
 00D7               ; values of C variables. Each structure contains 3 member elements.
 00D7               ; The first is a pointer to a contiguous block of RAM to be initial-
 00D7               ; ized. Blocks are always 255 bytes or less in length and never cross
 00D7               ; RAM page boundaries. The list terminates when the MSB of the pointer
 00D7               ; contains 0xFF. There are two formats for the struct depending on the
 00D7               ; value in the second member element, an unsigned byte:
 00D7               ; (1) If the value of the second element is non-zero, it represents
 00D7               ; the 'size' of the block of RAM to be initialized. In this case, the
 00D7               ; third member of the struct is an array of bytes of length 'size' and
 00D7               ; the bytes are copied to the block of RAM.
 00D7               ; (2) If the value of the second element is zero, the block of RAM is
 00D7               ; to be cleared to zero. In this case, the third member of the struct
 00D7               ; is an unsigned byte containing the number of bytes to clear.
 00D7           
 00D7           .AccessNextStructLoop:
 00D7 75            inc   X                            ; pXIData++
 00D8 0900          adc   A, 0
 00DA           .AccessStruct:                         ; Entry point for first block
 00DA               ;
 00DA               ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
 00DA               ;
 00DA 62E300        mov   reg[RES_WDT], 00h
 00DD 08            push  A
 00DE 28            romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
 00DF 60D5          mov   reg[MVW_PP], A               ;   for use with MVI write operations
 00E1 74            inc   A                            ; End of Struct List? (MSB==0xFF?)
 00E2 A04B          jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
 00E4 18            pop   A                            ; restore pXIData to [A,X]
 00E5 75            inc   X                            ; pXIData++
 00E6 0900          adc   A, 0
 00E8 08            push  A
 00E9 28            romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
 00EA 5300          mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
 00EC 18            pop   A                            ; restore pXIData to [A,X]
 00ED 75            inc   X                            ; pXIData++ (point to size)
 00EE 0900          adc   A, 0
 00F0 08            push  A
 00F1 28            romx                               ; Get the size (CPU.A <- *pXIData)
 00F2 A01C          jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
 00F4 5300          mov   [__r1], A                    ;             else downcount in __r1
 00F6 18            pop   A                            ; restore pXIData to [A,X]
 00F7           
 00F7           .CopyNextByteLoop:
 00F7               ; For each byte in the structure's array member, copy from flash to RAM.
 00F7               ; Assert: pXIData in [A,X] points to previous byte of flash source;
 00F7               ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
 00F7               ;         __r1 holds a non-zero count of the number of bytes remaining.
 00F7               ;
 00F7 75            inc   X                            ; pXIData++ (point to next data byte)
 00F8 0900          adc   A, 0
 00FA 08            push  A
 00FB 28            romx                               ; Get the data value (CPU.A <- *pXIData)
 00FC 3F00          mvi   [__r0], A                    ; Transfer the data to RAM
 00FE 4700FF        tst   [__r0], 0xff                 ; Check for page crossing
 0101 B006          jnz   .CopyLoopTail                ;   No crossing, keep going
 0103 5DD5          mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
 0105 74            inc   A
 0106 60D5          mov   reg[ MVW_PP], A
 0108           .CopyLoopTail:
 0108 18            pop   A                            ; restore pXIData to [A,X]
 0109 7A00          dec   [__r1]                       ; End of this array in flash?
 010B BFEB          jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
 010D 8FC9          jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
 010F           
 010F           .ClearRAMBlockToZero:
 010F 18            pop   A                            ; restore pXIData to [A,X]
 0110 75            inc   X                            ; pXIData++ (point to next data byte)
 0111 0900          adc   A, 0
 0113 08            push  A
 0114 28            romx                               ; Get the run length (CPU.A <- *pXIData)
 0115 5300          mov   [__r1], A                    ; Initialize downcounter
 0117 5000          mov   A, 0                         ; Initialize source data
 0119           
 0119           .ClearRAMBlockLoop:
 0119               ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
 0119               ;         __r1 holds a non-zero count of the number of bytes remaining.
 0119               ;
 0119 3F00          mvi   [__r0], A                    ; Clear a byte
 011B 4700FF        tst   [__r0], 0xff                 ; Check for page crossing
 011E B008          jnz   .ClearLoopTail               ;   No crossing, keep going
 0120 5DD5          mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
 0122 74            inc   A
 0123 60D5          mov   reg[ MVW_PP], A
 0125 5000          mov   A, 0                         ; Restore the zero used for clearing
 0127           .ClearLoopTail:
 0127 7A00          dec   [__r1]                       ; Was this the last byte?
 0129 BFEF          jnz   .ClearRAMBlockLoop           ;   No,  continue
 012B 18            pop   A                            ;   Yes, restore pXIData to [A,X] and
 012C 8FAA          jmp   .AccessNextStructLoop        ;        initialize another RAM block
 012E           
 012E           .C_RTE_WrapUp:
 012E 18            pop   A                            ; balance stack
 012F           
                ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                
 012F           C_RTE_Done:
 012F           
                ENDIF ; C_LANGUAGE_SUPPORT
                
                    ;-------------------------------
                    ; Voltage Stabilization for SMP
                    ;-------------------------------
                
                IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                    ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                    ; 5V before enabling the Precision Power-On Reset (PPOR).
                    ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                    or   reg[INT_MSK0],INT_MSK0_SLEEP
                    or    F, FLAG_XIO_MASK
                    and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                    or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                    and   F, ~FLAG_XIO_MASK
                    mov   reg[RES_WDT], 38h
                    mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                .WaitFor2ms:
                    tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                    jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                ENDIF ; SMP is operational
                ENDIF ; 5.0V Operation
                
                    ;-------------------------------
                    ; Set Power-On Reset (POR) Level
                    ;-------------------------------
                
                    ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper selection 
                    ; is made (in the global resources section of the device editor), a compilation error is created, disallowing
                    ; this selection. If the selection is valid, the POR level is then set.
                    ; Invalid cases checked: 
                    ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
                
                
                IF (POWER_SETTING & POWER_SET_3V3)              ; 3.3V Operation?
                   IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)      ; Not 24 MHz, Do Nothing...
                   ELSE                                         ; Otherwise, 24 MHz is selected... raise error
                        ERROR_PSoC SEE COMMENTS                 ; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
                   ENDIF
                ENDIF ; 3.3V w/ 24 MHz
                
                    ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                    ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                    ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                    ;  values should not be changed from the settings here. Failure to follow this instruction could 
                    ;  lead to corruption of PSoC flash.
                
 012F 7110          or    F, FLAG_XIO_MASK
 0131           
                IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                 IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                 ELSE                                       ;    No, fast mode
                  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                                            ;       no, set midpoint POR in user code, if desired
                  ELSE ; 24HMz                              ;
 0131 43E320        or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                  ENDIF ; 24MHz
                 ENDIF ; Slow Mode
                ENDIF ; 5.0V Operation
                
 0134 70EF          and   F, ~FLAG_XIO_MASK
 0136           
 0136               ;----------------------------
 0136               ; Wrap up and invoke "main"
 0136               ;----------------------------
 0136           
 0136               ; Disable the Sleep interrupt that was used for timing above.  In fact,
 0136               ; no interrupts should be enabled now, so may as well clear the register.
 0136               ;
 0136 62E000        mov  reg[INT_MSK0],0
 0139           
 0139               ; Everything has started OK. Now select requested CPU & sleep frequency.
 0139               ;
 0139 7110          or    F, FLAG_XIO_MASK
 013B 62E003        mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
 013E 43E200            or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
 0141 70EF          and   F, ~FLAG_XIO_MASK
 0143           
 0143               ; Global Interrupt are NOT enabled, this should be done in main().
 0143               ; LVD is set but will not occur unless Global Interrupts are enabled.
 0143               ; Global Interrupts should be enabled as soon as possible in main().
 0143               ;
 0143 62E200        mov  reg[INT_VC],0             ; Clear any pending interrupts which may
 0146                                              ; have been set during the boot process.
                IF      (TOOLCHAIN & HITECH)
                        ljmp  startup                  ; Jump to C compiler startup code
                ELSE
                IF ENABLE_LJMP_TO_MAIN
                    ljmp  _main                    ; goto main (no return)
                ELSE
 0146 7C0000        lcall _main                    ; call main
 0149           .Exit:
 0149 8FFF          jmp  .Exit                     ; Wait here after return till power-off or reset
                ENDIF
                ENDIF ; TOOLCHAIN
                
                    ;---------------------------------
                    ; Library Access to Global Parms
                    ;---------------------------------
                    ;
 014B            bGetPowerSetting:
 014B           _bGetPowerSetting:
 014B               ; Returns value of POWER_SETTING in the A register.
 014B               ; No inputs. No Side Effects.
 014B               ;
                IF (POWER_SETTING & POWER_SET_2V7)
                    mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                ELSE
 014B 5010          mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                ENDIF
 014D 7F            ret
 014E           
                IF      (TOOLCHAIN & HITECH)
                ELSE
                    ;---------------------------------
                    ; Order Critical RAM & ROM AREAs
                    ;---------------------------------
                    ;  'TOP' is all that has been defined so far...
                
                    ;  ROM AREAs for C CONST, static & global items
                    ;
                    AREA lit               (ROM, REL, CON)   ; 'const' definitions
                    AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
 0000           __idata_start:
 0000           
                    AREA func_lit          (ROM, REL, CON)   ; Function Pointers
 0000           __func_lit_start:
 0000           
                IF ( SYSTEM_LARGE_MEMORY_MODEL )
                    ; We use the func_lit area to store a pointer to extended initialized
                    ; data (xidata) area that follows the text area. Func_lit isn't
                    ; relocated by the code compressor, but the text area may shrink and
                    ; that moves xidata around.
                    ;
 0000 0000      __pXIData:         word __text_end           ; ptr to extended idata
                ENDIF
                
                    AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                    AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                
                    ; CODE segment for general use
                    ;
                    AREA text (ROM, REL, CON)
 0000           __text_start:
 0000           
 0000               ; RAM area usage
 0000               ;
                    AREA data              (RAM, REL, CON)   ; initialized RAM
 0000           __data_start:
 0000           
                    AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                    AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                    AREA bss               (RAM, REL, CON)   ; general use
 0000           __bss_start:
                ENDIF ; TOOLCHAIN
                ; end of file boot.asm
